package javastat.util;

/**
 * <p>Title: javastat</p>
 * <p>Description: JAVA programs for statistical computations</p>
 * <p>Copyright: Copyright (c) 2009</p>
 * <p>Company: Tung Hai University</p>
 * @author Wen Hsiang Wei
 * @version 1.4
 */

import static java.lang.Math.*;
import java.util.*;

/**
 *
 * <p>This class contains the collections of some basic methods used in
 * statistical computations. </p>
 */

public class BasicStatistics extends Object
{

    /**
     * Default BasicStatistics constructor.
     */

    public BasicStatistics() {};

    /**
     * The benchmark for the algorithems or loops to stop.
     */

    public static double[] convergenceCriterion;

    public static final double PI =
            3.141592653589793238462643383279502884197169399375;

    /**
     * The table for Wilcoxon sign rank test.
     * <br> Data source: Hollander, M. and Wolfe, D. A. (1999).
     *                   Nonparametric Statistical Methods.
     *                   John Wiley and Sons, INC., pp. 576-581.
     */

    public static final double[][] signRankTable =
    {      {0.625, 0.375, 0.250,
            0.125}, {0.562, 0.438, 0.312, 0.188, 0.125, 0.062}, {0.500, 0.406,
            0.312, 0.219, 0.156, 0.094, 0.062, 0.031}, {0.500, 0.422, 0.344,
            0.281, 0.219, 0.156, 0.109, 0.078, 0.047, 0.031, 0.016}, {0.531,
            0.469, 0.406, 0.344, 0.289, 0.234, 0.188, 0.148, 0.109, 0.078,
            0.055, 0.039, 0.023, 0.016, 0.008}, {0.527, 0.473, 0.422, 0.371,
            0.320, 0.273, 0.230, 0.191, 0.156, 0.125, 0.098, 0.074, 0.055,
            0.039, 0.027, 0.020, 0.012, 0.008, 0.004}, {0.500, 0.455, 0.410,
            0.367, 0.326, 0.285, 0.248, 0.213, 0.180, 0.150, 0.125, 0.102,
            0.082, 0.064, 0.049, 0.037, 0.027, 0.020, 0.014, 0.010, 0.006,
            0.004, 0.002}, {0.500, 0.461, 0.423, 0.385, 0.348, 0.312, 0.278,
            0.246, 0.216, 0.188, 0.161, 0.138, 0.116, 0.097, 0.080, 0.065,
            0.053, 0.042, 0.032, 0.024, 0.019, 0.014, 0.010, 0.007, 0.005,
            0.003, 0.002, 0.001}, {0.517, 0.483, 0.449, 0.416, 0.382, 0.350,
            0.319, 0.289, 0.260, 0.232, 0.207, 0.183, 0.160, 0.139, 0.120,
            0.103, 0.087, 0.074, 0.062, 0.051, 0.042, 0.034, 0.027, 0.021,
            0.016, 0.012, 0.009, 0.007, 0.005, 0.003, 0.002, 0.001, 0.001,
            0.0005}, {0.515, 0.485, 0.455, 0.425, 0.396, 0.367, 0.339, 0.311,
            0.285, 0.259, 0.235, 0.212, 0.190, 0.170, 0.151, 0.133, 0.117,
            0.102, 0.088, 0.076, 0.065, 0.055, 0.046, 0.039, 0.032, 0.026,
            0.021, 0.017, 0.013, 0.010, 0.008, 0.006, 0.005, 0.003, 0.002,
            0.002, 0.001, 0.001, 0.0005}, {0.207, 0.188, 0.170, 0.153, 0.137,
            0.122, 0.108, 0.095, 0.084, 0.073, 0.064, 0.055, 0.047, 0.040,
            0.034, 0.029, 0.024, 0.020, 0.016, 0.013, 0.011, 0.009, 0.007,
            0.005, 0.004, 0.003, 0.002, 0.002, 0.001, 0.001, 0.001, 0.0005},
            {0.213, 0.196, 0.179, 0.163, 0.148, 0.134, 0.121, 0.108, 0.097,
            0.086, 0.077, 0.068, 0.059, 0.052, 0.045, 0.039, 0.034, 0.029,
            0.025, 0.021, 0.018, 0.015, 0.012, 0.010, 0.008, 0.007, 0.005,
            0.004, 0.003, 0.003, 0.002, 0.002, 0.001, 0.001, 0.001, 0.0005},
            {0.211, 0.195, 0.180, 0.165, 0.151, 0.138, 0.126, 0.115, 0.104,
            0.094, 0.084, 0.076, 0.068, 0.060, 0.053, 0.047, 0.042, 0.036,
            0.032, 0.028, 0.024, 0.021, 0.018, 0.015, 0.013, 0.011, 0.009,
            0.008, 0.006, 0.005, 0.004, 0.003, 0.003, 0.002, 0.002, 0.001,
            0.001, 0.001, 0.001, 0.0005}, {0.106, 0.096, 0.088, 0.080, 0.072,
            0.065, 0.058, 0.052, 0.047, 0.042, 0.037, 0.033, 0.029, 0.025,
            0.022, 0.019, 0.017, 0.015, 0.013, 0.011, 0.009, 0.008, 0.007,
            0.006, 0.005, 0.004, 0.003, 0.003, 0.002, 0.002, 0.001, 0.001,
            0.001, 0.001, 0.001, 0.0005}, {0.103, 0.095, 0.087, 0.080, 0.073,
            0.066, 0.060, 0.054, 0.049, 0.044, 0.040, 0.036, 0.032, 0.028,
            0.025, 0.022, 0.020, 0.017, 0.015, 0.013, 0.012, 0.010, 0.009,
            0.008, 0.006, 0.006, 0.005, 0.004, 0.003, 0.003, 0.002, 0.002,
            0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.0005}, {0.106, 0.098,
            0.091, 0.084, 0.077, 0.071, 0.065, 0.059, 0.054, 0.049, 0.045,
            0.041, 0.037, 0.033, 0.030, 0.027, 0.024, 0.022, 0.019, 0.017,
            0.015, 0.013, 0.012, 0.010, 0.009, 0.008, 0.007, 0.006, 0.005,
            0.005, 0.004, 0.003, 0.003, 0.002, 0.002, 0.002, 0.001, 0.001,
            0.001, 0.001, 0.001, 0.001, 0.0005}, {0.1051, 0.0978, 0.0978,
            0.0978, 0.0782, 0.0723, 0.0723, 0.0723, 0.0723, 0.0521, 0.0478,
            0.0478, 0.0478, 0.0478, 0.0478, 0.0478, 0.0273, 0.0247, 0.0247,
            0.0247, 0.0247, 0.0247, 0.0247, 0.0247, 0.0247, 0.0102, 0.009,
            0.009, 0.009, 0.009, 0.0054, 0.0047, 0.0047, 0.0047, 0.0047, 0.0047,
            0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0010}, {0.1012, 0.0947,
            0.0947, 0.0947, 0.0768, 0.0715, 0.0715, 0.0715, 0.0715, 0.0527,
            0.0487, 0.0487, 0.0487, 0.0487, 0.0487, 0.0487, 0.0487, 0.0266,
            0.0242, 0.0242, 0.0242, 0.0242, 0.0242, 0.0242, 0.0242, 0.0242,
            0.0107, 0.0096, 0.0096, 0.0096, 0.0096, 0.0096, 0.0053, 0.0047,
            0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0047,
            0.0047, 0.0047, 0.0010}, {0.1015, 0.0953, 0.0953, 0.0953, 0.0786,
            0.0735, 0.0735, 0.0735, 0.0735, 0.0735, 0.0516, 0.0479, 0.0479,
            0.0479, 0.0479, 0.0479, 0.0479, 0.0479, 0.0479, 0.0251, 0.023,
            0.023, 0.023, 0.023, 0.023, 0.023, 0.023, 0.023, 0.0108, 0.0097,
            0.0097, 0.0097, 0.0097, 0.0097, 0.0097, 0.0051, 0.0045, 0.0045,
            0.0045, 0.0045, 0.0045, 0.0045, 0.0045, 0.0045, 0.0045, 0.0045,
            0.0045, 0.0011, 0.0009}, {0.1050, 0.0991, 0.0991, 0.0991, 0.0991,
            0.0780, 0.0733, 0.0733, 0.0733, 0.0733, 0.0733, 0.0527, 0.0492,
            0.0492, 0.0492, 0.0492, 0.0492, 0.0492, 0.0492, 0.0492, 0.0492,
            0.0250, 0.0250, 0.0250, 0.0250, 0.0250, 0.0250, 0.0250, 0.0250,
            0.0250, 0.0250, 0.0104, 0.0095, 0.0095, 0.0095, 0.0095, 0.0095,
            0.0095, 0.0052, 0.0046, 0.0046, 0.0046, 0.0046, 0.0046, 0.0046,
            0.0046, 0.0046, 0.0046, 0.0046, 0.0046, 0.0046, 0.0046, 0.0010},
            {0.1001, 0.0948, 0.0948, 0.0948, 0.0948, 0.0755, 0.0712, 0.0712,
            0.0712, 0.0712, 0.0712, 0.0523, 0.0490, 0.0490, 0.0490, 0.0490,
            0.0490, 0.0490, 0.0490, 0.0490, 0.0490, 0.0261, 0.0242, 0.0242,
            0.0242, 0.0242, 0.0242, 0.0242, 0.0242, 0.0242, 0.0242, 0.0242,
            0.0107, 0.0098, 0.0098, 0.0098, 0.0098, 0.0098, 0.0098, 0.0098,
            0.0051, 0.0046, 0.0046, 0.0046, 0.0046, 0.0046, 0.0046, 0.0046,
            0.0046, 0.0046, 0.0046, 0.0046, 0.0046, 0.0046, 0.0011, 0.0009},
            {0.1038, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0758, 0.0717,
            0.0717, 0.0717, 0.0717, 0.0717, 0.0717, 0.0505, 0.0475, 0.0475,
            0.0475, 0.0475, 0.0475, 0.0475, 0.0475, 0.0475, 0.0475, 0.0263,
            0.0245, 0.0245, 0.0245, 0.0245, 0.0245, 0.0245, 0.0245, 0.0245,
            0.0245, 0.0245, 0.0245, 0.0106, 0.0097, 0.0097, 0.0097, 0.0097,
            0.0097, 0.0097, 0.0097, 0.0053, 0.0048, 0.0048, 0.0048, 0.0048,
            0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048,
            0.0048, 0.0048, 0.0048, 0.0010}, {0.1001, 0.0954, 0.0954, 0.0954,
            0.0954, 0.0782, 0.0742, 0.0742, 0.0742, 0.0742, 0.0742, 0.0742,
            0.0742, 0.0507, 0.0479, 0.0479, 0.0479, 0.0479, 0.0479, 0.0479,
            0.0479, 0.0479, 0.0479, 0.0479, 0.0258, 0.0241, 0.0241, 0.0241,
            0.0241, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241,
            0.0241, 0.0101, 0.0094, 0.0094, 0.0094, 0.0094, 0.0094, 0.0094,
            0.0094, 0.0053, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048,
            0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048,
            0.0048, 0.0048, 0.0010}, {0.1039, 0.0994, 0.0994, 0.0994, 0.0994,
            0.0994, 0.0994, 0.0750, 0.0750, 0.0750, 0.0750, 0.0750, 0.0750,
            0.0750, 0.0524, 0.0497, 0.0497, 0.0497, 0.0497, 0.0497, 0.0497,
            0.0497, 0.0497, 0.0497, 0.0497, 0.0497, 0.0263, 0.0247, 0.0247,
            0.0247, 0.0247, 0.0247, 0.0247, 0.0247, 0.0247, 0.0247, 0.0247,
            0.0247, 0.0247, 0.0247, 0.0102, 0.0095, 0.0095, 0.0095, 0.0095,
            0.0095, 0.0095, 0.0095, 0.0095, 0.0051, 0.0047, 0.0047, 0.0047,
            0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0047,
            0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0047, 0.0010}, {0.1010,
            0.0968, 0.0968, 0.0968, 0.0968, 0.0968, 0.0776, 0.0741, 0.0741,
            0.0741, 0.0741, 0.0741, 0.0741, 0.0741, 0.0741, 0.0502, 0.0477,
            0.0477, 0.0477, 0.0477, 0.0477, 0.0477, 0.0477, 0.0477, 0.0477,
            0.0477, 0.0477, 0.0260, 0.0246, 0.0246, 0.0246, 0.0246, 0.0246,
            0.0246, 0.0246, 0.0246, 0.0246, 0.0246, 0.0246, 0.0246, 0.0246,
            0.0246, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
            0.0052, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048,
            0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048,
            0.0048, 0.0048, 0.0048, 0.0010}, {0.1008, 0.0968, 0.0968, 0.0968,
            0.0968, 0.0968, 0.0968, 0.0751, 0.0719, 0.0719, 0.0719, 0.0719,
            0.0719, 0.0719, 0.0719, 0.0521, 0.0496, 0.0496, 0.0496, 0.0496,
            0.0496, 0.0496, 0.0496, 0.0496, 0.0496, 0.0496, 0.0496, 0.0496,
            0.0496, 0.0252, 0.0239, 0.0239, 0.0239, 0.0239, 0.0239, 0.0239,
            0.0239, 0.0239, 0.0239, 0.0239, 0.0239, 0.0239, 0.0239, 0.0239,
            0.0102, 0.0096, 0.0096, 0.0096, 0.0096, 0.0096, 0.0096, 0.0096,
            0.0096, 0.0096, 0.0051, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048,
            0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048,
            0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0048, 0.0010}, {0.1027,
            0.0988, 0.0988, 0.0988, 0.0988, 0.0988, 0.0988, 0.0778, 0.0747,
            0.0747, 0.0747, 0.0747, 0.0747, 0.0747, 0.0747, 0.0747, 0.0747,
            0.0504, 0.0482, 0.0482, 0.0482, 0.0482, 0.0482, 0.0482, 0.0482,
            0.0482, 0.0482, 0.0482, 0.0482, 0.0482, 0.0482, 0.0253, 0.0240,
            0.0240, 0.0240, 0.0240, 0.0240, 0.0240, 0.0240, 0.0240, 0.0240,
            0.0240, 0.0240, 0.0240, 0.0240, 0.0240, 0.0240, 0.0101, 0.0095,
            0.0095, 0.0095, 0.0095, 0.0095, 0.0095, 0.0095, 0.0095, 0.0095,
            0.0053, 0.0049, 0.0049, 0.0049, 0.0049, 0.0049, 0.0049, 0.0049,
            0.0049, 0.0049, 0.0049, 0.0049, 0.0049, 0.0049, 0.0049, 0.0049,
            0.0049, 0.0049, 0.0049, 0.0049, 0.0049, 0.0049, 0.0010}, {0.1027,
            0.0990, 0.0990, 0.0990, 0.0990, 0.0990, 0.0990, 0.0990, 0.0759,
            0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730,
            0.0730, 0.0502, 0.0481, 0.0481, 0.0481, 0.0481, 0.0481, 0.0481,
            0.0481, 0.0481, 0.0481, 0.0481, 0.0481, 0.0481, 0.0481, 0.0261,
            0.0249, 0.0249, 0.0249, 0.0249, 0.0249, 0.0249, 0.0249, 0.0249,
            0.0249, 0.0249, 0.0249, 0.0249, 0.0249, 0.0249, 0.0249, 0.0249,
            0.0104, 0.0098, 0.0098, 0.0098, 0.0098, 0.0098, 0.0098, 0.0098,
            0.0098, 0.0098, 0.0098, 0.0098, 0.005, 0.005, 0.005, 0.005, 0.005,
            0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005,
            0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.0010}
    };

    /**
     * The index list used to locate the position in Wilcoxon sign rank table.
     */

    public static final int[] signRankIndex =
    {3, 5, 8, 11, 14, 18, 23, 28, 33, 39, 58, 66, 75, 93, 104, 115, 127, 140,
     153, 166, 181, 195, 211, 226, 243, 260, 277, 295
    };

    /**
     * The table for Wilcoxon rank sum test.
     * <br> Data source: Hollander, M. and Wolfe, D. A. (1999).
     *                   Nonparametric Statistical Methods.
     *                   John Wiley and Sons, INC., pp. 582-590.
     */

    public static final double[][][] rankSumTable =
    {    { {0.5, 0.25}, {0.6, 0.4,
            0.2}, {0.5, 0.333, 0.167}, {0.571, 0.429, 0.286, 0.143}, {0.5,
            0.375, 0.25, 0.125}, {0.556, 0.444, 0.333, 0.222, 0.111}, {0.5, 0.4,
            0.3, 0.2, 0.1}, {0.545, 0.455, 0.364, 0.273, 0.182, 0.091}, {0.5,
            0.417, 0.333, 0.25, 0.167, 0.083}, {0.538, 0.462, 0.385, 0.308,
            0.231, 0.154, 0.077}, {0.5, 0.429, 0.357, 0.286, 0.214, 0.143,
            0.071}, {0.533, 0.467, 0.4, 0.333, 0.267, 0.2, 0.133, 0.067}, {0.5,
            0.438, 0.375, 0.312, 0.25, 0.188, 0.125, 0.062}, {0.529, 0.471,
            0.412, 0.353, 0.294, 0.235, 0.176, 0.118, 0.059}, {0.5, 0.444,
            0.389, 0.333, 0.278, 0.222, 0.167, 0.111, 0.056}, {0.526, 0.474,
            0.421, 0.368, 0.316, 0.263, 0.211, 0.158, 0.105, 0.053}, {0.5, 0.45,
            0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05}, {0.524, 0.476, 0.429,
            0.381, 0.333, 0.286, 0.238, 0.19, 0.143, 0.095, 0.048}
         },
         { {0.6, 0.4, 0.2, 0.1}, {0.6, 0.4, 0.267, 0.133, 0.067}, {0.571, 0.429,
            0.286, 0.19, 0.095, 0.048}, {0.571, 0.429, 0.321, 0.214, 0.143,
            0.071, 0.036}, {0.556, 0.444, 0.333, 0.25, 0.167, 0.111, 0.056,
            0.028}, {0.556, 0.444, 0.356, 0.267, 0.2, 0.133, 0.089, 0.044,
            0.022}, {0.545, 0.455, 0.364, 0.291, 0.218, 0.164, 0.109, 0.073,
            0.036, 0.018}, {0.545, 0.455, 0.379, 0.303, 0.242, 0.182, 0.136,
            0.091, 0.061, 0.03, 0.015}, {0.538, 0.462, 0.385, 0.321, 0.256,
            0.205, 0.154, 0.115, 0.077, 0.051, 0.026, 0.013}, {0.538, 0.462,
            0.396, 0.33, 0.275, 0.22, 0.176, 0.132, 0.099, 0.066, 0.044, 0.022,
            0.011}, {0.533, 0.467, 0.4, 0.343, 0.286, 0.238, 0.19, 0.152, 0.114,
            0.086, 0.057, 0.038, 0.019, 0.01}, {0.533, 0.467, 0.408, 0.35, 0.3,
            0.25, 0.208, 0.167, 0.133, 0.1, 0.075, 0.05, 0.033, 0.017, 0.008},
            {0.529, 0.471, 0.412, 0.36, 0.309, 0.265, 0.221, 0.184, 0.147,
            0.118, 0.088, 0.066, 0.044, 0.029, 0.015, 0.007}, {0.529, 0.471,
            0.418, 0.366, 0.32, 0.275, 0.235, 0.196, 0.163, 0.131, 0.105, 0.078,
            0.059, 0.039, 0.026, 0.013, 0.007}, {0.526, 0.474, 0.421, 0.374,
            0.327, 0.287, 0.246, 0.211, 0.175, 0.146, 0.117, 0.094, 0.07, 0.053,
            0.035, 0.023, 0.012, 0.006}, {0.526, 0.474, 0.426, 0.379, 0.337,
            0.295, 0.258, 0.221, 0.189, 0.158, 0.132, 0.105, 0.084, 0.063,
            0.047, 0.032, 0.021, 0.011, 0.005}, {0.524, 0.476, 0.429, 0.386,
            0.343, 0.305, 0.267, 0.233, 0.2, 0.171, 0.143, 0.119, 0.095, 0.076,
            0.057, 0.043, 0.029, 0.019, 0.01, 0.005}, {0.524, 0.476, 0.433,
            0.39, 0.351, 0.312, 0.277, 0.242, 0.212, 0.182, 0.156, 0.13, 0.108,
            0.087, 0.069, 0.052, 0.039, 0.026, 0.017, 0.009, 0.004}
         },
         { {0.5, 0.35, 0.2, 0.1, 0.05}, {0.571, 0.429, 0.314, 0.2, 0.114, 0.057,
            0.029}, {0.5, 0.393, 0.286, 0.196, 0.125, 0.071, 0.036, 0.018},
            {0.548, 0.452, 0.357, 0.274, 0.19, 0.131, 0.083, 0.048, 0.024,
            0.012}, {0.5, 0.417, 0.333, 0.258, 0.192, 0.133, 0.092, 0.058,
            0.033, 0.017, 0.008}, {0.539, 0.461, 0.388, 0.315, 0.248, 0.188,
            0.139, 0.097, 0.067, 0.042, 0.024, 0.012, 0.006}, {0.5, 0.432,
            0.364, 0.3, 0.241, 0.186, 0.141, 0.105, 0.073, 0.05, 0.032, 0.018,
            0.009, 0.005}, {0.531, 0.469, 0.406, 0.346, 0.287, 0.234, 0.185,
            0.143, 0.108, 0.08, 0.056, 0.038, 0.024, 0.014, 0.007, 0.003}, {0.5,
            0.442, 0.385, 0.33, 0.277, 0.228, 0.184, 0.146, 0.113, 0.085, 0.063,
            0.044, 0.03, 0.019, 0.011, 0.005, 0.003}, {0.527, 0.473, 0.42,
            0.367, 0.316, 0.268, 0.224, 0.182, 0.147, 0.116, 0.09, 0.068, 0.051,
            0.035, 0.024, 0.015, 0.009, 0.004, 0.002}, {0.5, 0.45, 0.4, 0.352,
            0.305, 0.261, 0.22, 0.182, 0.148, 0.12, 0.095, 0.073, 0.055, 0.041,
            0.029, 0.02, 0.012, 0.007, 0.004, 0.002}, {0.524, 0.476, 0.429,
            0.384, 0.338, 0.296, 0.254, 0.216, 0.181, 0.15, 0.122, 0.099, 0.078,
            0.06, 0.046, 0.034, 0.024, 0.016, 0.01, 0.006, 0.003, 0.001}, {0.5,
            0.456, 0.412, 0.369, 0.327, 0.287, 0.249, 0.213, 0.18, 0.151, 0.125,
            0.102, 0.082, 0.065, 0.05, 0.038, 0.028, 0.02, 0.013, 0.009, 0.005,
            0.002, 0.001}, {0.521, 0.479, 0.438, 0.396, 0.356, 0.317, 0.28,
            0.244, 0.211, 0.18, 0.152, 0.127, 0.105, 0.086, 0.069, 0.055, 0.042,
            0.032, 0.024, 0.017, 0.011, 0.007, 0.004, 0.002, 0.001}, {0.5,
            0.461, 0.421, 0.382, 0.345, 0.308, 0.273, 0.239, 0.208, 0.179,
            0.153, 0.129, 0.108, 0.089, 0.073, 0.059, 0.046, 0.036, 0.027, 0.02,
            0.014, 0.01, 0.006, 0.004, 0.002, 0.001}, {0.519, 0.481, 0.444,
            0.407, 0.37, 0.335, 0.3, 0.267, 0.235, 0.206, 0.178, 0.153, 0.131,
            0.111, 0.092, 0.077, 0.062, 0.05, 0.04, 0.031, 0.023, 0.017, 0.012,
            0.008, 0.005, 0.003, 0.002, 0.001}, {0.5, 0.464, 0.429, 0.394,
            0.359, 0.325, 0.293, 0.262, 0.232, 0.204, 0.178, 0.154, 0.132,
            0.113, 0.095, 0.08, 0.066, 0.054, 0.044, 0.034, 0.027, 0.02, 0.015,
            0.01, 0.007, 0.005, 0.003, 0.001, 0.001}, {0.517, 0.483, 0.449,
            0.415, 0.382, 0.349, 0.317, 0.286, 0.257, 0.229, 0.202, 0.177,
            0.155, 0.134, 0.115, 0.098, 0.083, 0.069, 0.058, 0.047, 0.038, 0.03,
            0.023, 0.018, 0.013, 0.009, 0.006, 0.004, 0.002, 0.001, 0.001}
         },
         { {0.557, 0.443, 0.343, 0.243, 0.171, 0.1, 0.057, 0.029, 0.014},
           {0.548, 0.452, 0.365, 0.278, 0.206, 0.143, 0.095, 0.056, 0.032,
            0.016, 0.008},
           {0.543, 0.457, 0.381, 0.305, 0.238, 0.176, 0.129, 0.086,
            0.057, 0.033, 0.019, 0.01, 0.005}, {0.536, 0.464, 0.394, 0.324,
            0.264, 0.206, 0.158, 0.115, 0.082, 0.055, 0.036, 0.021, 0.012,
            0.006, 0.003}, {0.533, 0.467, 0.404, 0.341, 0.285, 0.23, 0.184,
            0.141, 0.107, 0.077, 0.055, 0.036, 0.024, 0.014, 0.008, 0.004},
            {0.53, 0.47, 0.413, 0.355, 0.302, 0.252, 0.207, 0.165, 0.13, 0.099,
            0.074, 0.053, 0.038, 0.025, 0.02, 0.01, 0.006, 0.003, 0.001},
            {0.527, 0.473, 0.42, 0.367, 0.318, 0.27, 0.227, 0.187, 0.152, 0.12,
            0.094, 0.071, 0.057, 0.038, 0.027, 0.018, 0.012, 0.007, 0.004,
            0.002, 0.001}, {0.525, 0.475, 0.426, 0.377, 0.33, 0.286, 0.245,
            0.206, 0.171, 0.14, 0.093, 0.089, 0.069, 0.052, 0.039, 0.028, 0.02,
            0.013, 0.009, 0.005, 0.003, 0.001, 0.001}, {0.524, 0.476, 0.431,
            0.385, 0.342, 0.299, 0.260, 0.223, 0.19, 0.158, 0.131, 0.106, 0.085,
            0.066, 0.052, 0.039, 0.029, 0.021, 0.015, 0.01, 0.007, 0.004, 0.002,
            0.001, 0.001}, {0.522, 0.478, 0.435, 0.392, 0.352, 0.312, 0.274,
            0.239, 0.206, 0.175, 0.148, 0.123, 0.101, 0.082, 0.065, 0.051,
            0.039, 0.03, 0.022, 0.016, 0.011, 0.008, 0.005, 0.003, 0.002, 0.001,
            0}, {0.521, 0.479, 0.439, 0.399, 0.36, 0.323, 0.287, 0.253, 0.221,
            0.191, 0.164, 0.139, 0.116, 0.096, 0.079, 0.063, 0.051, 0.04, 0.031,
            0.023, 0.017, 0.012, 0.009, 0.006, 0.004, 0.002, 0.001, 0.001, 0},
            {0.519, 0.481, 0.443, 0.405, 0.368, 0.332, 0.298, 0.265, 0.235,
            0.205, 0.179, 0.154, 0.131, 0.11, 0.092, 0.076, 0.062, 0.05, 0.04,
            0.031, 0.024, 0.018, 0.014, 0.01, 0.007, 0.005, 0.003, 0.002, 0.001,
            0.001, 0}, {0.518, 0.482, 0.446, 0.41, 0.375, 0.341, 0.308, 0.277,
            0.247, 0.219, 0.192, 0.168, 0.145, 0.124, 0.106, 0.089, 0.074,
            0.061, 0.05, 0.04, 0.032, 0.025, 0.019, 0.015, 0.011, 0.008, 0.006,
            0.004, 0.002, 0.001, 0.001, 0, 0}, {0.517, 0.483, 0.449, 0.415,
            0.381, 0.349, 0.318, 0.287, 0.258, 0.231, 0.205, 0.181, 0.158,
            0.138, 0.119, 0.101, 0.086, 0.072, 0.06, 0.049, 0.04, 0.032, 0.026,
            0.02, 0.016, 0.012, 0.009, 0.006, 0.005, 0.003, 0.002, 0.001, 0.001,
            0, 0}, {0.516, 0.484, 0.451, 0.419, 0.387, 0.356, 0.326, 0.297,
            0.269, 0.242, 0.217, 0.193, 0.171, 0.15, 0.131, 0.113, 0.098, 0.083,
            0.07, 0.059, 0.049, 0.040, 0.033, 0.027, 0.021, 0.017, 0.013, 0.01,
            0.007, 0.005, 0.004, 0.002, 0.002, 0.001, 0.001, 0, 0}, {0.516,
            0.484, 0.453, 0.422, 0.392, 0.363, 0.334, 0.306, 0.279, 0.253,
            0.228, 0.205, 0.183, 0.162, 0.143, 0.125, 0.109, 0.094, 0.081,
            0.069, 0.058, 0.049, 0.041, 0.033, 0.027, 0.022, 0.018, 0.014,
            0.011, 0.008, 0.006, 0.004, 0.003, 0.002, 0.001, 0.001, 0, 0, 0},
            {0.515, 0.485, 0.455, 0.426, 0.397, 0.368, 0.341, 0.314, 0.288,
            0.262, 0.239, 0.216, 0.194, 0.174, 0.155, 0.137, 0.12, 0.105, 0.091,
            0.079, 0.067, 0.057, 0.048, 0.041, 0.034, 0.028, 0.023, 0.018,
            0.015, 0.011, 0.009, 0.007, 0.005, 0.004, 0.003, 0.002, 0.001,
            0.001, 0, 0, 0}
         },
         { {0.5, 0.421, 0.345, 0.274, 0.21, 0.155, 0.111, 0.075, 0.048, 0.028,
            0.016, 0.008, 0.004}, {0.535, 0.465, 0.396, 0.331, 0.268, 0.214,
            0.165, 0.123, 0.089, 0.063, 0.041, 0.026, 0.015, 0.009, 0.004,
            0.002}, {0.5, 0.438, 0.378, 0.319, 0.265, 0.216, 0.172, 0.134,
            0.101, 0.074, 0.053, 0.037, 0.024, 0.015, 0.009, 0.005, 0.003,
            0.001}, {0.528, 0.472, 0.416, 0.362, 0.311, 0.262, 0.218, 0.177,
            0.142, 0.111, 0.085, 0.064, 0.047, 0.033, 0.023, 0.015, 0.009,
            0.005, 0.003, 0.002, 0.001}, {0.5, 0.449, 0.399, 0.35, 0.303, 0.259,
            0.219, 0.182, 0.149, 0.12, 0.095, 0.073, 0.056, 0.041, 0.03, 0.021,
            0.014, 0.009, 0.006, 0.003, 0.002, 0.001, 0}, {0.523, 0.477, 0.43,
            0.384, 0.339, 0.297, 0.257, 0.22, 0.185, 0.155, 0.127, 0.103, 0.082,
            0.065, 0.05, 0.038, 0.028, 0.02, 0.014, 0.01, 0.006, 0.004, 0.002,
            0.001, 0.001, 0}
         },
         { {0.531, 0.469, 0.409, 0.35, 0.294, 0.242, 0.197, 0.155, 0.12, 0.09,
            0.066, 0.047, 0.032, 0.021, 0.013, 0.008, 0.004, 0.002, 0.001},
            {0.527, 0.473, 0.418, 0.365, 0.314, 0.267, 0.223, 0.183, 0.147,
            0.117, 0.09, 0.069, 0.051, 0.037, 0.026, 0.017, 0.011, 0.007, 0.004,
            0.002, 0.001, 0.001}, {0.525, 0.475, 0.426, 0.377, 0.331, 0.286,
            0.245, 0.207, 0.172, 0.141, 0.114, 0.091, 0.071, 0.054, 0.041, 0.03,
            0.021, 0.015, 0.01, 0.006, 0.004, 0.002, 0.001, 0.001, 0}, {0.523,
            0.477, 0.432, 0.388, 0.344, 0.303, 0.264, 0.228, 0.194, 0.164,
            0.136, 0.112, 0.091, 0.072, 0.057, 0.044, 0.033, 0.025, 0.018,
            0.013, 0.009, 0.006, 0.004, 0.002, 0.001, 0.001, 0, 0}, {0.521,
            0.479, 0.437, 0.396, 0.356, 0.318, 0.281, 0.246, 0.214, 0.184,
            0.157, 0.132, 0.11, 0.09, 0.074, 0.059, 0.047, 0.036, 0.028, 0.021,
            0.016, 0.011, 0.008, 0.005, 0.004, 0.002, 0.001, 0.001, 0, 0, 0}
         },
         { {0.5, 0.451, 0.402, 0.355, 0.31, 0.267, 0.228, 0.191, 0.159, 0.13,
            0.104, 0.082, 0.064, 0.049, 0.036, 0.027, 0.019, 0.013, 0.009,
            0.006, 0.003, 0.002, 0.001, 0.001, 0}, {0.522, 0.478, 0.433, 0.389,
            0.347, 0.306, 0.268, 0.232, 0.198, 0.168, 0.14, 0.116, 0.095, 0.076,
            0.06, 0.047, 0.036, 0.027, 0.02, 0.014, 0.01, 0.007, 0.005, 0.003,
            0.002, 0.001, 0.001, 0, 0}, {0.5, 0.459, 0.419, 0.379, 0.34, 0.303,
            0.268, 0.235, 0.204, 0.176, 0.15, 0.126, 0.105, 0.087, 0.071, 0.057,
            0.045, 0.036, 0.027, 0.021, 0.016, 0.011, 0.008, 0.006, 0.004,
            0.003, 0.002, 0.001, 0.001, 0, 0, 0}, {0.519, 0.481, 0.443, 0.406,
            0.37, 0.335, 0.3, 0.268, 0.237, 0.209, 0.182, 0.157, 0.135, 0.115,
            0.097, 0.081, 0.067, 0.054, 0.044, 0.035, 0.028, 0.022, 0.017,
            0.012, 0.009, 0.007, 0.005, 0.003, 0.002, 0.002, 0.001, 0.001, 0, 0,
            0, 0}
         },
         { {0.52, 0.48, 0.439, 0.399, 0.36, 0.323, 0.287, 0.253, 0.221, 0.191,
            0.164, 0.139, 0.117, 0.097, 0.08, 0.065, 0.052, 0.041, 0.032, 0.025,
            0.019, 0.014, 0.01, 0.007, 0.005, 0.003, 0.002, 0.001, 0.001, 0.001,
            0, 0, 0}, {0.519, 0.481, 0.444, 0.407, 0.371, 0.336, 0.303, 0.271,
            0.24, 0.212, 0.185, 0.161, 0.138, 0.118, 0.1, 0.084, 0.069, 0.057,
            0.046, 0.037, 0.03, 0.023, 0.018, 0.014, 0.01, 0.008, 0.006, 0.004,
            0.003, 0.002, 0.001, 0.001, 0, 0, 0, 0, 0}, {0.517, 0.483, 0.448,
            0.414, 0.381, 0.348, 0.317, 0.286, 0.257, 0.23, 0.204, 0.18, 0.158,
            0.137, 0.118, 0.102, 0.086, 0.073, 0.061, 0.051, 0.042, 0.034,
            0.027, 0.022, 0.017, 0.013, 0.01, 0.008, 0.006, 0.004, 0.003, 0.002,
            0.002, 0.001, 0.001, 0, 0, 0, 0, 0, 0}
         },
         { {0.5, 0.466, 0.432, 0.398, 0.365, 0.333, 0.302, 0.273, 0.245, 0.218,
            0.193, 0.17, 0.149, 0.129, 0.111, 0.095, 0.081, 0.068, 0.057, 0.047,
            0.039, 0.031, 0.025, 0.02, 0.016, 0.012, 0.009, 0.007, 0.005, 0.004,
            0.003, 0.002, 0.001, 0.001, 0.001, 0, 0, 0, 0, 0, 0}, {0.516, 0.484,
            0.452, 0.421, 0.39, 0.36, 0.33, 0.302, 0.274, 0.248, 0.223, 0.2,
            0.178, 0.158, 0.139, 0.121, 0.106, 0.091, 0.078, 0.067, 0.056,
            0.047, 0.039, 0.033, 0.027, 0.022, 0.017, 0.014, 0.011, 0.009, 0007,
            0.005, 0.004, 0.003, 0.002, 0.001, 0.001, 0.001, 0, 0, 0, 0, 0, 0,
            0, 0}
         },
         { {0.515, 0.485, 0.456, 0.427, 0.398, 0.37, 0.342, 0.315, 0.289, 0.264,
            0.241, 0.218, 0.197, 0.176, 0.157, 0.14, 0.124, 0.109, 0.095, 0.083,
            0.072, 0.062, 0.053, 0.045, 0.038, 0.032, 0.026, 0.022, 0.018,
            0.014, 0.012, 0.009, 0.007, 0.006, 0.004, 0.003, 0.003, 0.002,
            0.001, 0.001, 0.001, 0.001, 0, 0, 0, 0, 0, 0, 0, 0, 0}
         }
    };

    /**
     * The standard normal table,
     * <br> normalTalbe[i][j],
     * <br> i=0,..., 30: corresponding to the numbers 0.0, 0.1,..., 2.9, 3.0;
     * <br> j=0,..., 9: corresponding to the numbers 0.00, 0.01,..., 0.09.
     */

    public static final double[][] normalTable =
    {      {0.0000, 0.0040, 0.0080,
            0.0120, 0.0160, 0.0199, 0.0239, 0.0279, 0.0319, 0.0359}, {0.0398,
            0.0438, 0.0478, 0.0517, 0.0557, 0.0596, 0.0636, 0.0675, 0.0714,
            0.0753}, {0.0793, 0.0832, 0.0871, 0.0910, 0.0948, 0.0987, 0.1026,
            0.1064, 0.1103, 0.1141}, {0.1179, 0.1217, 0.1255, 0.1293, 0.1331,
            0.1368, 0.1406, 0.1443, 0.1480, 0.1517}, {0.1554, 0.1591, 0.1628,
            0.1664, 0.1700, 0.1736, 0.1772, 0.1808, 0.1844, 0.1879}, {0.1915,
            0.1950, 0.1985, 0.2019, 0.2054, 0.2088, 0.2123, 0.2157, 0.2190,
            0.2224}, {0.2257, 0.2291, 0.2324, 0.2357, 0.2389, 0.2422, 0.2454,
            0.2486, 0.2517, 0.2549}, {0.2580, 0.2611, 0.2642, 0.2673, 0.2704,
            0.2734, 0.2764, 0.2794, 0.2823, 0.2852}, {0.2881, 0.2910, 0.2939,
            0.2967, 0.2995, 0.3023, 0.3051, 0.3078, 0.3106, 0.3133}, {0.3159,
            0.3186, 0.3212, 0.3238, 0.3264, 0.3289, 0.3315, 0.3340, 0.3365,
            0.3389}, {0.3413, 0.3438, 0.3461, 0.3485, 0.3508, 0.3531, 0.3554,
            0.3577, 0.3599, 0.3621}, {0.3643, 0.3665, 0.3686, 0.3708, 0.3729,
            0.3749, 0.3770, 0.3790, 0.3810, 0.3830}, {0.3849, 0.3869, 0.3888,
            0.3907, 0.3925, 0.3944, 0.3962, 0.3980, 0.3997, 0.4015}, {0.4032,
            0.4049, 0.4066, 0.4082, 0.4099, 0.4115, 0.4131, 0.4147, 0.4162,
            0.4177}, {0.4192, 0.4207, 0.4222, 0.4236, 0.4251, 0.4265, 0.4279,
            0.4292, 0.4306, 0.4319}, {0.4332, 0.4345, 0.4357, 0.4370, 0.4382,
            0.4394, 0.4406, 0.4418, 0.4429, 0.4441}, {0.4452, 0.4463, 0.4474,
            0.4484, 0.4495, 0.4505, 0.4515, 0.4525, 0.4535, 0.4545}, {0.4554,
            0.4564, 0.4573, 0.4582, 0.4591, 0.4599, 0.4608, 0.4616, 0.4625,
            0.4633}, {0.4641, 0.4649, 0.4656, 0.4664, 0.4671, 0.4678, 0.4686,
            0.4693, 0.4699, 0.4706}, {0.4713, 0.4719, 0.4726, 0.4732, 0.4738,
            0.4744, 0.4750, 0.4756, 0.4761, 0.4767}, {0.4772, 0.4778, 0.4783,
            0.4788, 0.4793, 0.4798, 0.4803, 0.4808, 0.4812, 0.4817}, {0.4821,
            0.4826, 0.4830, 0.4834, 0.4838, 0.4842, 0.4846, 0.4850, 0.4854,
            0.4857}, {0.4861, 0.4864, 0.4868, 0.4871, 0.4875, 0.4878, 0.4881,
            0.4884, 0.4887, 0.4890}, {0.4893, 0.4896, 0.4898, 0.4901, 0.4904,
            0.4906, 0.4909, 0.4911, 0.4913, 0.4916}, {0.4918, 0.4920, 0.4922,
            0.4925, 0.4927, 0.4929, 0.4931, 0.4932, 0.4934, 0.4936}, {0.4938,
            0.4940, 0.4941, 0.4943, 0.4945, 0.4946, 0.4948, 0.4949, 0.4951,
            0.4952}, {0.4953, 0.4955, 0.4956, 0.4957, 0.4959, 0.4960, 0.4961,
            0.4962, 0.4963, 0.4964}, {0.4965, 0.4966, 0.4967, 0.4968, 0.4969,
            0.4970, 0.4971, 0.4972, 0.4973, 0.4974}, {0.4974, 0.4975, 0.4976,
            0.4977, 0.4977, 0.4978, 0.4979, 0.4979, 0.4980, 0.4981}, {0.4981,
            0.4982, 0.4982, 0.4983, 0.4984, 0.4984, 0.4985, 0.4985, 0.4986,
            0.4986}, {0.4987, 0.4987, 0.4987, 0.4988, 0.4988, 0.4989, 0.4989,
            0.4989, 0.4990, 0.4990}
    };

    /**
     * The t distribution table,
     * <br> tTalbe[i][j],
     * <br> i=0,..., 28: corresponding to the degrees of freedom i+1;
     * <br> i=29: the degree of freedom equal to infinity;
     * <br> j=0,..., 4: corresponding to the probabilities 0.1, 0.05, 0.025,
     *                  0.01 and 0.005.
     */

    public static final double[][] tTable =
    {      {3.078, 6.314, 12.706, 31.821,
            63.656}, {1.886, 2.920, 4.303, 6.965, 9.925}, {1.638, 2.353, 3.182,
            4.541, 5.841}, {1.533, 2.132, 2.776, 3.747, 4.604}, {1.476, 2.015,
            2.571, 3.365, 4.032}, {1.440, 1.943, 2.447, 3.143, 3.707}, {1.415,
            1.895, 2.365, 2.998, 3.499}, {1.397, 1.860, 2.306, 2.896, 3.355},
            {1.383, 1.833, 2.262, 2.821, 3.250}, {1.372, 1.812, 2.228, 2.764,
            3.169}, {1.363, 1.796, 2.201, 2.718, 3.106}, {1.356, 1.782, 2.179,
            2.681, 3.055}, {1.350, 1.771, 2.160, 2.650, 3.012}, {1.345, 1.761,
            2.145, 2.624, 2.977}, {1.341, 1.753, 2.131, 2.602, 2.947}, {1.337,
            1.746, 2.120, 2.583, 2.921}, {1.333, 1.740, 2.110, 2.567, 2.898},
            {1.330, 1.734, 2.101, 2.552, 2.878}, {1.328, 1.729, 2.093, 2.539,
            2.861}, {1.325, 1.725, 2.086, 2.528, 2.845}, {1.323, 1.721, 2.080,
            2.518, 2.831}, {1.321, 1.717, 2.074, 2.508, 2.819}, {1.319, 1.714,
            2.069, 2.500, 2.807}, {1.318, 1.711, 2.064, 2.492, 2.797}, {1.316,
            1.708, 2.060, 2.485, 2.787}, {1.315, 1.706, 2.056, 2.479, 2.779},
            {1.314, 1.703, 2.052, 2.473, 2.771}, {1.313, 1.701, 2.048, 2.467,
            2.763}, {1.311, 1.699, 2.045, 2.462, 2.756}, {1.282, 1.645, 1.960,
            2.326, 2.576}
    };

    /**
     * The f distribution table with 0.1 level of significance,
     * <br> fTableTenPercent[i][j]: denomerator d.f. equal to i+1 and numerator
     *                              d.f. equal to j+1, i, j =0, 1,..., 9;
     * <br> i=10 or j=10: denomerator d.f. or numerator d.f. equal to 12;
     * <br> i=11 or j=11: denomerator d.f. or numerator d.f. equal to 15;
     * <br> i=12 or j=12: denomerator d.f. or numerator d.f. equal to 20;
     * <br> i=13 or j=13: denomerator d.f. or numerator d.f. equal to 30;
     * <br> i=14 or j=14: denomerator d.f. or numerator d.f. equal to 60;
     * <br> i=15 or j=15: denomerator d.f. or numerator d.f. equal to 120;
     * <br> i=16 or j=16: denomerator d.f. or numerator d.f. equal to infinity.
     */

    public static final double[][] fTableTenPercent =
    {      {38.863, 49.500, 53.593,
            55.833, 57.240, 58.204, 58.906, 59.439, 59.858, 60.195, 60.705,
            61.220, 61.740, 62.265, 62.794, 63.061, 63.328}, {8.526, 9.000,
            9.162, 9.243, 9.293, 9.326, 9.349, 9.367, 9.381, 9.392, 9.408,
            9.425, 9.441, 9.458, 9.475, 9.483, 9.491}, {5.538, 5.462, 5.391,
            5.343, 5.309, 5.285, 5.266, 5.252, 5.240, 5.230, 5.216, 5.200,
            5.184, 5.168, 5.151, 5.143, 5.134}, {4.545, 4.325, 4.191, 4.107,
            4.051, 4.010, 3.979, 3.955, 3.936, 3.920, 3.896, 3.870, 3.844,
            3.817, 3.790, 3.775, 3.761}, {4.060, 3.780, 3.619, 3.520, 3.453,
            3.405, 3.368, 3.339, 3.316, 3.297, 3.268, 3.238, 3.207, 3.174,
            3.140, 3.123, 3.105}, {3.776, 3.463, 3.289, 3.181, 3.108, 3.055,
            3.014, 2.983, 2.958, 2.937, 2.905, 2.871, 2.836, 2.800, 2.762,
            2.742, 2.722}, {3.589, 3.257, 3.074, 2.961, 2.883, 2.827, 2.785,
            2.752, 2.725, 2.703, 2.668, 2.632, 2.595, 2.555, 2.514, 2.493,
            2.471}, {3.458, 3.113, 2.924, 2.806, 2.726, 2.668, 2.624, 2.589,
            2.561, 2.538, 2.502, 2.464, 2.425, 2.383, 2.339, 2.316, 2.293},
            {3.360, 3.006, 2.813, 2.693, 2.611, 2.551, 2.505, 2.469, 2.440,
            2.416, 2.379, 2.340, 2.298, 2.255, 2.208, 2.184, 2.159}, {3.285,
            2.924, 2.728, 2.605, 2.522, 2.461, 2.414, 2.377, 2.347, 2.323,
            2.284, 2.244, 2.201, 2.155, 2.107, 2.082, 2.055}, {3.177, 2.807,
            2.606, 2.480, 2.394, 2.331, 2.283, 2.245, 2.214, 2.188, 2.147,
            2.105, 2.060, 2.011, 1.960, 1.932, 1.904}, {3.073, 2.695, 2.490,
            2.361, 2.273, 2.208, 2.158, 2.119, 2.086, 2.059, 2.017, 1.972,
            1.924, 1.873, 1.817, 1.787, 1.755}, {2.975, 2.589, 2.380, 2.249,
            2.158, 2.091, 2.040, 1.999, 1.965, 1.937, 1.892, 1.845, 1.794,
            1.738, 1.677, 1.643, 1.607}, {2.881, 2.489, 2.276, 2.142, 2.049,
            1.980, 1.927, 1.884, 1.849, 1.819, 1.773, 1.722, 1.667, 1.606,
            1.538, 1.499, 1.456}, {2.791, 2.393, 2.177, 2.041, 1.946, 1.875,
            1.819, 1.775, 1.738, 1.707, 1.657, 1.603, 1.543, 1.476, 1.395,
            1.348, 1.291}, {2.748, 2.347, 2.130, 1.992, 1.896, 1.824, 1.767,
            1.722, 1.684, 1.652, 1.601, 1.545, 1.482, 1.409, 1.320, 1.265,
            1.193}, {2.706, 2.303, 2.084, 1.945, 1.847, 1.774, 1.717, 1.670,
            1.632, 1.599, 1.546, 1.487, 1.421, 1.342, 1.240, 1.169, 1.000}
    };

    /**
     * The f distribution table with 0.05 level of significance,
     * <br> fTableFivePercent[i][j]: denomerator d.f. equal to i+1 and
     *                               numerator d.f. equal to j+1,
     *                               i, j =0, 1,..., 9;
     * <br> i=10 or j=10: denomerator d.f. or numerator d.f. equal to 12;
     * <br> i=11 or j=11: denomerator d.f. or numerator d.f. equal to 15;
     * <br> i=12 or j=12: denomerator d.f. or numerator d.f. equal to 20;
     * <br> i=13 or j=13: denomerator d.f. or numerator d.f. equal to 30;
     * <br> i=14 or j=14: denomerator d.f. or numerator d.f. equal to 60;
     * <br> i=15 or j=15: denomerator d.f. or numerator d.f. equal to 120;
     * <br> i=16 or j=16: denomerator d.f. or numerator d.f. equal to infinity.
     */

    public static final double[][] fTableFivePercent =
    {      {161.45, 199.50,
            215.71, 224.58, 230.16, 233.99, 236.77, 238.88, 240.54, 241.88,
            243.91, 245.95, 248.01, 250.10, 252.20, 253.25, 254.32}, {18.513,
            19.000, 19.164, 19.247, 19.296, 19.330, 19.353, 19.371, 19.385,
            19.396, 19.413, 19.429, 19.446, 19.462, 19.479, 19.487, 19.496},
            {10.128, 9.552, 9.277, 9.117, 9.013, 8.941, 8.887, 8.845, 8.812,
            8.786, 8.745, 8.703, 8.660, 8.617, 8.572, 8.549, 8.526}, {7.709,
            6.944, 6.591, 6.388, 6.256, 6.163, 6.094, 6.041, 5.999, 5.964,
            5.912, 5.858, 5.803, 5.746, 5.688, 5.658, 5.628}, {6.608, 5.786,
            5.409, 5.192, 5.050, 4.950, 4.876, 4.818, 4.772, 4.735, 4.678,
            4.619, 4.558, 4.496, 4.431, 4.398, 4.365}, {5.987, 5.143, 4.757,
            4.534, 4.387, 4.284, 4.207, 4.147, 4.099, 4.060, 4.000, 3.938,
            3.874, 3.808, 3.740, 3.705, 3.669}, {5.591, 4.737, 4.347, 4.120,
            3.972, 3.866, 3.787, 3.726, 3.677, 3.637, 3.575, 3.511, 3.445,
            3.376, 3.304, 3.267, 3.230}, {5.318, 4.459, 4.066, 3.838, 3.687,
            3.581, 3.500, 3.438, 3.388, 3.347, 3.284, 3.218, 3.150, 3.079,
            3.005, 2.967, 2.928}, {5.117, 4.256, 3.863, 3.633, 3.482, 3.374,
            3.293, 3.230, 3.179, 3.137, 3.073, 3.006, 2.936, 2.864, 2.787,
            2.748, 2.707}, {4.965, 4.103, 3.708, 3.478, 3.326, 3.217, 3.135,
            3.072, 3.020, 2.978, 2.913, 2.845, 2.774, 2.700, 2.621, 2.580,
            2.538}, {4.747, 3.885, 3.490, 3.259, 3.106, 2.996, 2.913, 2.849,
            2.796, 2.753, 2.687, 2.617, 2.544, 2.466, 2.384, 2.341, 2.296},
            {4.543, 3.682, 3.287, 3.056, 2.901, 2.790, 2.707, 2.641, 2.588,
            2.544, 2.475, 2.403, 2.328, 2.247, 2.160, 2.114, 2.066}, {4.351,
            3.493, 3.098, 2.866, 2.711, 2.599, 2.514, 2.447, 2.393, 2.348,
            2.278, 2.203, 2.124, 2.039, 1.946, 1.896, 1.843}, {4.171, 3.316,
            2.922, 2.690, 2.534, 2.421, 2.334, 2.266, 2.211, 2.165, 2.092,
            2.015, 1.932, 1.841, 1.740, 1.683, 1.622}, {4.001, 3.150, 2.758,
            2.525, 2.368, 2.254, 2.167, 2.097, 2.040, 1.993, 1.917, 1.836,
            1.748, 1.649, 1.534, 1.467, 1.389}, {3.920, 3.072, 2.680, 2.447,
            2.290, 2.175, 2.087, 2.016, 1.959, 1.910, 1.834, 1.750, 1.659,
            1.554, 1.429, 1.352, 1.254}, {3.841, 2.996, 2.605, 2.372, 2.214,
            2.099, 2.010, 1.938, 1.880, 1.831, 1.752, 1.666, 1.571, 1.459,
            1.318, 1.221, 1.000}
    };

    /**
     * The f distribution table with 0.01 level of significance,
     * <br> fTableOnePercent[i][j]: denomerator d.f. equal to i+1 and numerator
     *                              d.f. equal to j+1, i, j =0, 1,..., 9;
     * <br> i=10 or j=10: denomerator d.f. or numerator d.f. equal to 12;
     * <br> i=11 or j=11: denomerator d.f. or numerator d.f. equal to 15;
     * <br> i=12 or j=12: denomerator d.f. or numerator d.f. equal to 20;
     * <br> i=13 or j=13: denomerator d.f. or numerator d.f. equal to 30;
     * <br> i=14 or j=14: denomerator d.f. or numerator d.f. equal to 60;
     * <br> i=15 or j=15: denomerator d.f. or numerator d.f. equal to 120;
     * <br> i=16 or j=16: denomerator d.f. or numerator d.f. equal to infinity.
     */

    public static final double[][] fTableOnePercent =
    {      {4052.2, 4999.5, 5403.4,
            5624.6, 5763.7, 5859.0, 5928.4, 5891.1, 6022.5, 6055.8, 6106.3,
            6157.3, 6208.7, 6260.6, 6313.0, 6339.4, 6365.9}, {98.501, 98.995,
            99.159, 99.240, 99.299, 99.333, 99.356, 99.374, 99.388, 99.399,
            99.416, 99.432, 99.449, 99.466, 99.482, 99.491, 99.499}, {34.116,
            30.816, 29.456, 28.709, 28.236, 27.910, 27.671, 27.488, 27.344,
            27.228, 27.051, 26.871, 26.689, 26.503, 26.315, 26.220, 26.125},
            {21.197, 18.000, 16.694, 15.977, 15.522, 15.207, 14.976, 14.799,
            14.659, 14.546, 14.374, 14.198, 14.020, 13.838, 13.652, 13.558,
            13.463}, {16.258, 13.274, 12.060, 11.392, 10.967, 10.672, 10.455,
            10.289, 10.158, 10.051, 9.888, 9.722, 9.553, 9.379, 9.202, 9.112,
            9.021}, {13.745, 10.925, 9.780, 9.148, 8.746, 8.466, 8.260, 8.102,
            7.976, 7.874, 7.718, 7.559, 7.396, 7.229, 7.057, 6.969, 6.880},
            {12.246, 9.547, 8.451, 7.847, 7.460, 7.191, 6.993, 6.840, 6.719,
            6.620, 6.469, 6.314, 6.155, 5.992, 5.823, 5.737, 5.650}, {11.258,
            8.649, 7.591, 7.006, 6.632, 6.371, 6.178, 6.029, 5.911, 5.814,
            5.667, 5.515, 5.359, 5.198, 5.032, 4.946, 4.859}, {10.561, 8.021,
            6.992, 6.422, 6.057, 5.802, 5.613, 5.467, 5.351, 5.257, 5.111,
            4.962, 4.808, 4.649, 4.483, 4.398, 4.311}, {10.044, 7.559, 6.552,
            5.994, 5.636, 5.386, 5.200, 5.057, 4.942, 4.849, 4.706, 4.558,
            4.405, 4.247, 4.082, 3.996, 3.909}, {9.330, 6.927, 5.953, 5.412,
            5.064, 4.821, 4.640, 4.499, 4.388, 4.296, 4.155, 4.010, 3.858,
            3.701, 3.535, 3.449, 3.361}, {8.683, 6.359, 5.417, 4.893, 4.556,
            4.318, 4.142, 4.004, 3.895, 3.805, 3.666, 3.522, 3.372, 3.214,
            3.047, 2.959, 2.868}, {8.096, 5.849, 4.938, 4.431, 4.103, 3.871,
            3.699, 3.564, 3.457, 3.368, 3.231, 3.088, 2.938, 2.778, 2.608,
            2.517, 2.421}, {7.562, 5.390, 4.510, 4.018, 3.699, 3.473, 3.304,
            3.173, 3.067, 2.979, 2.843, 2.700, 2.549, 2.386, 2.208, 2.111,
            2.006}, {7.077, 4.977, 4.126, 3.649, 3.339, 3.119, 2.953, 2.823,
            2.718, 2.632, 2.496, 2.352, 2.198, 2.028, 1.836, 1.726, 1.601},
            {6.851, 4.786, 3.949, 3.480, 3.174, 2.956, 2.792, 2.663, 2.559,
            2.472, 2.336, 2.191, 2.035, 1.860, 1.656, 1.533, 1.381}, {6.635,
            4.605, 3.782, 3.319, 3.017, 2.802, 2.639, 2.511, 2.407, 2.321,
            2.185, 2.039, 1.878, 1.696, 1.473, 1.325, 1.000}
    };

    /**
     * The f distribution table with 0.001 level of significance,
     * <br> fTablePointOnePercent[i][j]: denomerator d.f. equal to i+1 and
     *                                   numerator d.f. equal to j+1,
     *                                   i, j =0, 1,..., 9;
     * <br> i=10 or j=10: denomerator d.f. or numerator d.f. equal to 12;
     * <br> i=11 or j=11: denomerator d.f. or numerator d.f. equal to 15;
     * <br> i=12 or j=12: denomerator d.f. or numerator d.f. equal to 20;
     * <br> i=13 or j=13: denomerator d.f. or numerator d.f. equal to 30;
     * <br> i=14 or j=14: denomerator d.f. or numerator d.f. equal to 60;
     * <br> i=15 or j=15: denomerator d.f. or numerator d.f. equal to 120;
     * <br> i=16 or j=16: denomerator d.f. or numerator d.f. equal to infinity.
     */

    public static final double[][] fTablePointOnePercent =
    {      {405284, 500000,
            540379, 562500, 576405, 585937, 592873, 598144, 602284, 605621,
            610668, 615764, 620908, 626099, 631337, 633972, 636629}, {998.50,
            999.00, 999.17, 999.25, 999.30, 999.33, 999.36, 999.38, 999.39,
            999.40, 999.42, 999.43, 999.45, 999.47, 999.48, 999.49, 999.50},
            {167.03, 148.50, 141.11, 137.10, 134.58, 132.85, 131.58, 130.62,
            129.86, 129.25, 128.32, 127.37, 126.42, 125.45, 124.47, 123.97,
            123.47}, {74.137, 61.246, 56.177, 53.436, 51.712, 50.525, 49.658,
            48.996, 48.475, 48.053, 47.412, 46.761, 46.100, 45.429, 44.746,
            44.400, 44.051}, {47.181, 37.122, 33.202, 31.085, 29.752, 28.834,
            28.163, 27.649, 27.244, 26.917, 26.418, 25.911, 25.395, 24.869,
            24.333, 24.060, 23.785}, {35.507, 27.000, 23.703, 21.924, 20.803,
            20.030, 19.463, 19.030, 18.688, 18.411, 17.989, 17.559, 17.120,
            16.672, 16.214, 15.981, 15.745}, {29.245, 21.689, 18.772, 17.198,
            16.206, 15.521, 15.019, 14.634, 14.330, 14.083, 13.707, 13.324,
            12.932, 12.530, 12.119, 11.909, 11.697}, {25.415, 18.494, 15.829,
            14.392, 13.485, 12.858, 12.398, 12.046, 11.767, 11.540, 11.194,
            10.841, 10.480, 10.109, 9.727, 9.532, 9.334}, {22.857, 16.387,
            13.902, 12.560, 11.714, 11.128, 10.698, 10.368, 10.107, 9.894,
            9.570, 9.238, 8.898, 8.548, 8.187, 8.001, 7.813}, {21.040, 14.905,
            12.553, 11.283, 10.481, 9.926, 9.517, 9.204, 8.956, 8.754, 8.445,
            8.129, 7.804, 7.469, 7.122, 6.944, 6.762}, {18.643, 12.974, 10.804,
            9.633, 8.892, 8.379, 8.001, 7.710, 7.480, 7.292, 7.005, 6.709,
            6.405, 6.090, 5.762, 5.593, 5.420}, {16.587, 11.339, 9.335, 8.253,
            7.567, 7.092, 6.741, 6.471, 6.256, 6.081, 5.812, 5.535, 5.248,
            4.950, 4.638, 4.475, 4.307}, {14.818, 9.953, 8.098, 7.095, 6.460,
            6.018, 5.692, 5.440, 5.239, 5.075, 4.823, 4.562, 4.290, 4.005,
            3.703, 3.544, 3.378}, {13.293, 8.773, 7.054, 6.124, 5.534, 5.122,
            4.817, 4.581, 4.393, 4.239, 4.000, 3.753, 3.493, 3.217, 2.920,
            2.759, 2.589}, {11.973, 7.767, 6.171, 5.307, 4.757, 4.372, 4.086,
            3.865, 3.687, 3.541, 3.315, 3.078, 2.827, 2.555, 2.252, 2.082,
            1.890}, {11.378, 7.321, 5.781, 4.947, 4.416, 4.044, 3.767, 3.552,
            3.379, 3.237, 3.016, 2.783, 2.534, 2.262, 1.950, 1.767, 1.543},
            {10.827, 6.908, 5.422, 6.617, 4.103, 3.743, 3.475, 3.266, 3.097,
            2.959, 2.742, 2.513, 2.266, 1.990, 1.660, 1.447, 1.000}
    };

    /**
     * The chi-square distribution table (left tail),
     * <br> chiSquareTableLeftTail[i][j]: degrees of freedom equal to i+1,
     *                                    i=0,..., 34;
     * <br> i=35: degree of freedom equal to 40;
     * <br> i=36: degree of freedom equal to 60;
     * <br> i=37: degree of freedom equal to 120;
     * <br> j=0,..., 5: corresponding to the probabilities 0.995, 0.99, 0.975,
     *                  0.95, 0.9 and 0.75.
     */

    public static final double[][] chiSquareTableLeftTail =
    {      {0.000, 0.000,
            0.001, 0.004, 0.016, 0.102}, {0.010, 0.020, 0.051, 0.103, 0.211,
            0.575}, {0.072, 0.115, 0.216, 0.352, 0.584, 1.213}, {0.207, 0.297,
            0.484, 0.711, 1.064, 1.923}, {0.412, 0.554, 0.831, 1.145, 1.610,
            2.675}, {0.676, 0.872, 1.237, 1.635, 2.204, 3.455}, {0.989, 1.239,
            1.690, 2.167, 2.833, 4.255}, {1.344, 1.647, 2.180, 2.733, 3.490,
            5.071}, {1.735, 2.088, 2.700, 3.325, 4.168, 5.899}, {2.156, 2.558,
            3.247, 3.940, 4.865, 6.737}, {2.603, 3.053, 3.816, 4.575, 5.578,
            7.584}, {3.074, 3.571, 4.404, 5.226, 6.304, 8.438}, {3.565, 4.107,
            5.009, 5.892, 7.041, 9.299}, {4.075, 4.660, 5.629, 6.571, 7.790,
            10.165}, {4.601, 5.229, 6.262, 7.261, 8.547, 11.037}, {5.142, 5.812,
            6.908, 7.962, 9.312, 11.912}, {5.697, 6.408, 7.564, 8.672, 10.085,
            12.792}, {6.265, 7.015, 8.231, 9.390, 10.865, 13.675}, {6.844,
            7.633, 8.907, 10.117, 11.651, 14.562}, {7.434, 8.260, 9.591, 10.851,
            12.443, 15.452}, {8.034, 8.897, 10.283, 11.591, 13.240, 16.344},
            {8.643, 9.542, 10.982, 12.338, 14.041, 17.240}, {9.260, 10.196,
            11.689, 13.091, 14.848, 18.137}, {9.886, 10.856, 12.401, 13.848,
            15.659, 19.037}, {10.520, 11.524, 13.120, 14.611, 16.473, 19.939},
            {11.160, 12.198, 13.844, 15.379, 17.292, 20.843}, {11.808, 12.878,
            14.573, 16.151, 18.114, 21.749}, {12.461, 13.565, 15.308, 16.928,
            18.939, 22.657}, {13.121, 14.256, 16.047, 17.708, 19.768, 23.567},
            {13.787, 14.953, 16.791, 18.493, 20.599, 24.478}, {14.458, 15.655,
            17.539, 19.281, 21.434, 25.390}, {15.134, 16.362, 18.291, 20.072,
            22.271, 26.304}, {15.815, 17.073, 19.047, 20.867, 23.110, 27.219},
            {16.501, 17.789, 19.806, 21.664, 23.952, 28.136}, {17.192, 18.509,
            20.569, 22.465, 24.797, 29.054}, {20.707, 22.164, 24.433, 26.509,
            29.051, 33.660}, {35.534, 37.485, 40.482, 43.188, 46.459, 52.294},
            {83.852, 86.923, 91.573, 95.705, 100.624, 109.220}
    };

    /**
     * The chi-square distribution table (right tail),
     * <br> chiSquareTableRightTail[i][j]: degrees of freedom equal to i+1,
     *                                     i=0,..., 34;
     * <br> i=35: degree of freedom equal to 40;
     * <br> i=36: degree of freedom equal to 60;
     * <br> i=37: degree of freedom equal to 120;
     * <br> j=0,..., 5: corresponding to the probabilities 0.995, 0.99, 0.975,
     *                  0.95, 0.9 and 0.75.
     */

    public static final double[][] chiSquareTableRightTail =
    {      {1.323, 2.706,
            3.841, 5.024, 6.635, 7.879}, {2.773, 4.605, 5.991, 7.378, 9.210,
            10.597}, {4.108, 6.251, 7.815, 9.348, 11.345, 12.838}, {5.385,
            7.779, 9.488, 11.143, 13.277, 14.860}, {6.626, 9.236, 11.070,
            12.832, 15.086, 16.750}, {7.841, 10.645, 12.592, 14.449, 16.812,
            18.548}, {9.037, 12.017, 14.067, 16.013, 18.475, 20.278}, {10.219,
            13.362, 15.507, 17.535, 20.090, 21.955}, {11.389, 14.684, 16.919,
            19.023, 21.666, 23.589}, {12.549, 15.987, 18.307, 20.483, 23.209,
            25.188}, {13.701, 17.275, 19.675, 21.920, 24.725, 26.757}, {14.845,
            18.549, 21.026, 23.337, 26.217, 28.300}, {15.984, 19.812, 22.362,
            24.736, 27.688, 29.819}, {17.117, 21.064, 23.685, 26.119, 29.141,
            31.319}, {18.245, 22.307, 24.996, 27.488, 30.578, 32.801}, {19.369,
            23.542, 26.296, 28.845, 32.000, 34.267}, {20.489, 24.769, 27.587,
            30.191, 33.409, 35.718}, {21.605, 25.989, 28.869, 31.526, 34.805,
            37.156}, {22.718, 27.204, 30.144, 32.852, 36.191, 38.582}, {23.828,
            28.412, 31.410, 34.170, 37.566, 39.997}, {24.935, 29.615, 32.671,
            35.479, 38.932, 41.401}, {26.039, 30.813, 33.924, 36.781, 40.289,
            42.796}, {27.141, 32.007, 35.172, 38.076, 41.638, 44.181}, {28.241,
            33.196, 36.415, 39.364, 42.980, 45.558}, {29.339, 34.382, 37.652,
            40.646, 44.314, 46.928}, {30.435, 35.563, 38.885, 41.923, 45.642,
            48.290}, {31.528, 36.741, 40.113, 43.195, 46.963, 49.645}, {32.620,
            37.916, 41.337, 44.461, 48.278, 50.994}, {33.771, 39.087, 42.557,
            45.722, 49.588, 52.335}, {34.800, 40.256, 43.773, 46.979, 50.892,
            53.672}, {35.887, 41.422, 44.985, 48.232, 52.191, 55.002}, {36.973,
            42.585, 46.194, 49.480, 53.486, 56.328}, {38.058, 43.745, 47.400,
            50.725, 54.775, 57.648}, {39.141, 44.903, 48.602, 51.966, 56.061,
            58.964}, {40.223, 46.059, 49.802, 53.203, 57.342, 60.275}, {45.616,
            51.805, 55.758, 59.342, 63.691, 66.766}, {66.981, 74.397, 79.082,
            83.298, 88.379, 91.952}, {130.055, 140.233, 146.567, 152.211,
            158.950, 163.648}
    };

    /**
     * The index list used to locate the position in Wilcoxon rank sum table.
     */

    public static final int[][] rankSumIndex =
    {      {3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 9, 9, 10, 10, 11, 11}, {6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 19, 20, 21, 22, 23}, {11, 12, 14, 15, 17, 18, 20, 21,
            23, 24, 26, 27, 29, 30, 32, 33, 35, 36}, {18, 20, 22, 24, 26, 28,
            30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50}, {28, 30, 33, 35, 38,
            40}, {39, 42, 45, 48, 51}, {53, 56, 60, 63}, {68, 72, 76}, {86, 90},
            {105}
    };

    /**
     * Calculates the sum of the data.
     * @param data the input data (two dimensional array).
     * @return the sum of the data.
     */

    public double sum(double[] ...data)
    {
        double s = 0;
        for (int i = 0; i < data.length; i++)
        {
            for (int j = 0; j < data[i].length; j++)
            {
                s += data[i][j];
            }
        }

        return s;
    }

    /**
     * Calculates the mean of the input data.
     * @param data the input data.
     * @return the mean of the input data.
     * @exception IllegalArgumentException the length of the input data should
     *                                     not be 0.
     */

    public double mean(double[] data)
    {
        if (data.length == 0)
        {
            throw new IllegalArgumentException(
                    "The length of the input data should not be 0.");
        }

        return sum(data) / data.length;
    }

    /**
     * Calculates the weithed mean of the input data.
     * @param weights the weights.
     * @param data the input data.
     * @return the weighted mean of the input data.
     * @exception IllegalArgumentException the length of the input data should
     *                                     not be 0.
     * @exception IllegalArgumentException the length of the input data and the
     *                                     weights should be equal.
     */

    public double weightedMean(double[] weights, double[] data)
    {
        if (data.length == 0)
        {
            throw new IllegalArgumentException(
                    "The length of the input data should not be 0.");
        }
        if (data.length != weights.length)
        {
            throw new IllegalArgumentException(
                    "The length of the input data and the weights should be" +
                    " equal");
        }
        double weightedMean = 0.0;
        for(int i =0; i < data.length; i++)
        {
            weightedMean += weights[i]*data[i];
        }

        return weightedMean / sum(weights);
    }

    /**
     * Calculates the Winsorized mean.
     * @param alpha the alpha'th percentile.
     * @param beta the beta'th percentile.
     * @param data the input data.
     * @return the Winsorized mean.
     * @exception IllegalArgumentException beta should be greater than alpha.
     */

    public double winsorizedMean(double alpha,
                                 double beta,
                                 double[] data)
    {
        if(beta <= alpha)
        {
            throw new IllegalArgumentException(
                    "beta should be greater than alpha.");

        }
        double[] sortedData = new DataManager().sort(data);
        int[] index = new int[]{(int) Math.ceil(data.length * alpha),
                      (int) Math.floor(data.length * beta)};
        double sum = 0.0;
        for(int i = 0; i < index[0]; i++)
        {
            sum += sortedData[index[0]-1];
        }
        for(int i = index[1]; i < data.length; i++)
        {
            sum += sortedData[index[1]-1];
        }
        for(int i = index[0]; i < index[1]; i++)
        {
            sum += sortedData[i];
        }

        return sum / data.length;
    }

    /**
     * Calculates the five number summary, including the miminum, first
     * quartile, median, thrid quartile, maximun.
     * @param data the input data.
     * @return the five number summary.
     */

    public double[] fiveNumberSummary(double[] data)
    {
        double[] fiveNumberSummary = new double[5];
        double[] copy = (double[]) data.clone();
        Arrays.sort(copy);
        fiveNumberSummary[0] = copy[0];
        fiveNumberSummary[4] = copy[copy.length - 1];
        if (data.length == (data.length / 4) * 4)
        {
            fiveNumberSummary[1] = (copy[data.length / 4] +
                                    copy[data.length / 4 - 1]) / 2.0;
        }
        else
        {
            fiveNumberSummary[1] = copy[data.length / 4];
        }
        if ((data.length % 2) == 0)
        {
            fiveNumberSummary[2] = (copy[data.length / 2] +
                                    copy[data.length / 2 - 1]) / 2.0;
        }
        else
        {
            fiveNumberSummary[2] = copy[data.length / 2];
        }
        if (data.length == ((data.length * 3 / 4) * 4) / 3)
        {
            fiveNumberSummary[3] = (copy[data.length * 3 / 4] +
                                    copy[data.length * 3 / 4 - 1]) / 2.0;
        }
        else
        {
            fiveNumberSummary[3] = copy[data.length * 3 / 4];
        }

        return fiveNumberSummary;
    }

    /**
     * Calculates the median of the input data.
     * @param data the input data.
     * @return the median of the input data.
     */

    public double median(double[] data)
    {
        return fiveNumberSummary(data)[2];
    }

    /**
     * Calculates the percentiles of the input data.
     * @param percents the percents.
     * @param data the input data.
     * @return the percentiles of the input data.
     */

    public double[] percentile(double[] percents,
                               double[] data)
    {
        double[] percentiles = new double[percents.length];
        double[] copy = (double[]) data.clone();
        int n = data.length;
        Arrays.sort(copy);
        for(int i = 0; i < percentiles.length; i++)
        {
            if((n * percents[i]) == Math.ceil(n * percents[i]))
            {
                percentiles[i] = (copy[((int) (n * percents[i])) - 1] +
                                  copy[(int) (n * percents[i])]) / 2.0;
            }
            else
            {
                percentiles[i] = copy[((int) (Math.ceil(n * percents[i]))) -1];
            }
        }

        return percentiles;
    }

    /**
     * Calculates the z-scores of the input data.
     * @param data the input data.
     * @return the z-scores of the input data.
     */

    public double[] zScore(double[] data)
    {
        double[] zScore = new double[data.length];
        double mean = mean(data);
        double sdev = Math.sqrt(variance(data));
        for(int i = 0; i < zScore.length; i++)
        {
            zScore[i] = (data[i] - mean) / sdev;
        }

        return zScore;
    }

    /**
     * Calculates the variance of the input data.
     * @param data the input data.
     * @return the variance of the input data.
     * @exception IllegalArgumentException the length of the input data should
     *                                     not be 0.
     */

    public double variance(double[] data)
    {
        if (data.length == 0)
        {
            throw new IllegalArgumentException(
                    "The length of the input data should not be 0.");
        }
        double sumOfSquare = 0.0;
        for (int i = 0; i < data.length; i++)
        {
            sumOfSquare += pow(data[i], 2.0);
        }

        return (sumOfSquare - (pow(sum(data), 2.0) / data.length)) /
                (data.length - 1);
    }

    /**
     * Calculates the covariance of two variables.
     * @param data1 the input data from variable 1.
     * @param data2 the input data from variable 2.
     * @return the covariance of two variables.
     * @exception IllegalArgumentException the length of the input data should
     *                                     not be 0.
     */

    public double covariance(double[] data1,
                             double[] data2)
    {
        if (data1.length == 0 || data2.length == 0)
        {
            throw new IllegalArgumentException(
                    "The length of the input data should not be 0.");
        }
        double covNumerator = 0.0;
        double mean1 = mean(data1);
        double mean2 = mean(data2);
        for (int i = 0; i < data1.length; i++)
        {
            covNumerator += (data1[i] - mean1) * (data2[i] - mean2);
        }

        return covNumerator / (data1.length - 1);
    }

    /**
     * Calculates the correlation of two variables.
     * @param data1 the input data from variable 1.
     * @param data2 the input data from variable 2.
     * @return the correlation of two variables.
     * @exception IllegalArgumentException the length of the input data should
     *                                     not be 0.
     */

    public double correlation(double[] data1,
                              double[] data2)
    {
        if (data1.length == 0 || data2.length == 0)
        {
            throw new IllegalArgumentException(
                    "The length of the input data should not be 0.");
        }

        return covariance(data1, data2) /
                (sqrt(variance(data1)) * sqrt(variance(data2)));
    }

    /**
     * Calculates the standard error of the sample mean.
     * @param data the input data.
     * @return the standard error of the sample mean.
     */

    public double meanSE(double[] data)
    {
        if (data.length == 0)
        {
            throw new IllegalArgumentException(
                    "The length of the input data should not be 0.");
        }

        return sqrt(variance(data) / data.length);
    }

    /**
     * Calculates the sample proportion.
     * @param counts the number of successes.
     * @param samSize the total sample size (the number of trials).
     * @return the sample proportion.
     * @exception IllegalArgumentException the counts or sample size should be
     *                                     (strictly) positive.
     */

    public double proportion(double counts,
                             double samSize)
    {
        if ((counts <= 0.0) || (samSize < 0.0))
        {
            throw new IllegalArgumentException(
                    "The counts or sample size should be (strictly) positive.");
        }

        return counts / samSize;
    }

    /**
     * Calculates the standard error of the sample proportion.
     * @param counts  the number of successes.
     * @param samSize the total sample size (the number of trials).
     * @return the standard error of the sample proportion.
     */

    public double proportionSE(double counts,
                               double samSize)
    {
        double pbar = proportion(counts, samSize);

        return sqrt(pbar * (1 - pbar) / samSize);
    }


    /**
     * Calculates the sample mean difference.
     * @param data1 the input data from population 1.
     * @param data2 the input data from population 2.
     * @return the sample mean difference.
     * @exception IllegalArgumentException the length of the input data should
     *                                     not be 0.
     */

    public double meanDifference(double[] data1,
                                 double[] data2)
    {
        if (data1.length == 0 || data2.length == 0)
        {
            throw new IllegalArgumentException(
                    "The length of the input data should not be 0.");
        }

        return mean(data1) - mean(data2);
    }

    /**
     * Calculates the standard error of the sample mean difference.
     * @param data1 the input data from population 1.
     * @param data2 the input data from population 2.
     * @param test T test or Z test with the choices "T Test" or "Z Test".
     * @return the standard error of the sample mean difference.
     * @exception IllegalArgumentException the length of the input data should
     *                                     not be 0.
     */

    public double meanDifferenceSE(double[] data1,
                                   double[] data2,
                                   String test)
    {
        if (data1.length == 0 || data2.length == 0)
        {
            throw new IllegalArgumentException(
                    "The length of the input data should not be 0.");
        }
        double var1 = variance(data1);
        double var2 = variance(data2);
        double meanDiffVar;
        if (test.equalsIgnoreCase("T") || test.equalsIgnoreCase("T Test"))
        {
            meanDiffVar = ((1.0 / data1.length) + (1.0 / data2.length)) *
                          ((data1.length - 1) * var1 +
                           (data2.length - 1) * var2) /
                          (data1.length + data2.length - 2);
        }
        else
        {
            meanDiffVar = (var1 / data1.length) + (var2 / data2.length);
        }

        return sqrt(meanDiffVar);
    }

    /**
     * Calculates the sample proportion difference.
     * @param count1 the number of successes in population 1.
     * @param samSize1 the sample size from population 1.
     * @param count2 the number of successes in population 2.
     * @param samSize2 the sample size from population 2.
     * @return the sample proportion difference.
     * @exception IllegalArgumentException the counts and sample sizes from
     *                                     both populations should be positive.
     */

    public double proportionDifference(double count1,
                                       double samSize1,
                                       double count2,
                                       double samSize2)
    {
        if ((count1 <= 0.0) || (samSize1 < 0.0))
        {
            throw new IllegalArgumentException(
                    "The counts and sample size of the data from " +
                    "population 1 should be (strictly) positive.");
        }
        if ((count2 <= 0.0) || (samSize2 < 0.0))
        {
            throw new IllegalArgumentException(
                    "The counts and sample size of the data from " +
                    "population 2 should be (strictly) positive.");
        }

        return (count1 / samSize1) - (count2 / samSize2);
    }

    /**
     * Calculates the standard error of the sample proportion difference.
     * @param count1 the number of successes in population 1.
     * @param samSize1 the sample size from population 1.
     * @param count2 the number of successes in population 2.
     * @param samSize2 the sample size from population 2.
     * @return the standard error of the sample proportion difference.
     * @exception IllegalArgumentException the counts and sample sizes from both
     *                                     populations should be positive.
     */

    public double proportionDifferenceSE(double count1,
                                         double samSize1,
                                         double count2,
                                         double samSize2)
    {
        if ((count1 <= 0.0) || (samSize1 < 0.0))
        {
            throw new IllegalArgumentException(
                    "The counts and sample size of the data from " +
                    "population 1 should be (strictly) positive.");
        }
        if ((count2 <= 0.0) || (samSize2 < 0.0))
        {
            throw new IllegalArgumentException(
                    "The counts and sample size of the data from " +
                    "population 2 should be (strictly) positive.");
        }

        return sqrt(pow(proportionSE(count1, samSize1), 2.0) +
                    pow(proportionSE(count2, samSize2), 2.0));
    }

    /**
     * Calculates the expected value of the sign rank statistic based on large
     * sample approximation.
     * @param med the median under test.
     * @param data the input data.
     * @return the approximated expected value of the sign rank statistic.
     */

    public double signRankMean(double med,
                               double[] data)
    {
        double zn = new DataManager().zeroNumber(med, data);

        return 0.25 * (data.length - zn) * (data.length + 1 - zn);
    }

    /**
     * Calculates the variance of the sign rank statistic based on large sample
     * approximation.
     * @param med the median under test.
     * @param data the input data.
     * @return the approximated variance of the sign rank statistic.
     */

    public double signRankVariance(double med,
                                   double[] data)
    {
        DataManager dm = new DataManager();
        double[] nonzeroData = dm.nonZeroData(med, data);
        double[] tn = dm.tieNumber(med, nonzeroData);
        tn = dm.nonZeroData(1.0, tn);
        double tieAdjust = 0.0;
        for (int i = 0; i < tn.length; i++)
        {
            tieAdjust += 0.5 * (tn[i] - 1) * (tn[i] + 1);
        }

        return (1.0 / 24.0) * (nonzeroData.length * (nonzeroData.length + 1) *
                               (2 * nonzeroData.length + 1) - tieAdjust);
    }

    /**
     * Calculates the expected value of the rank sum statistic based on large
     * sample approximation.
     * @param data1 the input data from population 1.
     * @param data2 the input data from population 2.
     * @return the approximated expected value of the rank sum statistic.
     */

    public double rankSumMean(double[] data1,
                              double[] data2)
    {
        return 0.5 * data1.length * (data1.length + data2.length + 1);
    }

    /**
     * Calculates the variance of the rank sum statistic based on large sample
     * approximation.
     * @param data1 the input data from population 1.
     * @param data2 the input data from population 2.
     * @return the approximated variance of the rank sum statistic.
     */

    public double rankSumVariance(double[] data1,
                                  double[] data2)
    {
        DataManager dm = new DataManager();
        double[] data = dm.dataMerge(data1, data2);
        double[] tn = dm.tieNumber(data);
        tn = dm.nonZeroData(1.0, tn);
        double tieAdjust = 0.0;
        for (int i = 0; i < tn.length; i++)
        {
            tieAdjust += (tn[i] - 1) * (tn[i] + 1);
        }

        return (data1.length * data2.length * (data.length + 1)) / 12.0 -
                ((data1.length * data2.length) /
                 (12.0 * data.length * (data.length - 1))) * tieAdjust;
    }

    /**
     * Calculates the number of principal components to be excluded based on the
     * specified level.
     * @param pcaVariance the variances of the  principal components.
     * @param level the choice criterion for including just enough components to
     *              explain some amount (100%*level) of the variance.
     * @return the required number of principal components.
     * @exception IllegalArgumentException the choice criterion should be
     *                                     (strictly) positive and not greater
     *                                     than 1.
     */

    public int pcaNumber(double[] pcaVariance,
                         double level)
    {
        new DataManager().checkPositiveRange(pcaVariance, "pcaVariance");
        if ((level <= 0.0) || (level > 1))
        {
            throw new IllegalArgumentException(
                    "The choice criterion should be (strictly) positive and " +
                    "not greater than 1.");
        }
        int indices = pcaVariance.length - 1;
        double pcaVarianceSum = sum(pcaVariance);
        double initial = pcaVariance[indices] / pcaVarianceSum;
        while ((initial - level) < -1 * pow(10, -6.0))
        {
            indices -= 1;
            initial += pcaVariance[indices] / pcaVarianceSum;
        }

        return indices;
    }

    /**
     * Calculates the row mean vector.
     * @param data the input two dimentional array.
     * @return the row mean vector.
     */

    public double[] meanVector(double[] ...data)
    {
        double[] mv = new double[data.length];
        for (int j = 0; j < data.length; j++)
        {
            mv[j] = mean(data[j]);
        }

        return mv;
    }

    /**
     * Calculates the column mean vector.
     * @param data the input two dimentional array.
     * @return the column mean vector.
     */

    public double[] columnMeanVector(double[] ...data)
    {
        double[] mv = new DataManager().zeroArray(data[0].length);
        for (int i = 0; i < data[0].length; i++)
        {
            for (int j = 0; j < data.length; j++)
            {
                mv[i] += data[j][i];
            }
            mv[i] /= data.length;
        }

        return mv;
    }

    /**
     * Calculates the variance-covariance matrix for a set of variables.
     * @param data the input data,
     * <br>        data[j]: the input data from the (j+1)'th variable.
     * @return the variance-covariance matrix.
     */

    public double[][] covarianceMatrix(double[] ...data)
    {
        double[][] covMatrix = new double[data.length][data.length];
        for (int j = 0; j < data.length; j++)
        {
            for (int k = 0; k < data.length; k++)
            {
                covMatrix[j][k] = covariance(data[j], data[k]);
            }
        }

        return covMatrix;
    }

    /**
     * Calculates the correlation matrix for a set of variables.
     * @param data the input data,
     * <br>        data[j]: the input data from the (j+1)'th variable.
     * @return the correlation matrix.
     */

    public double[][] correlationMatrix(double[] ...data)
    {
        double[][] correMatrix = new double[data.length][data.length];
        for (int j = 0; j < data.length; j++)
        {
            correMatrix[j][j] = 1.0;
            for (int k = 0; k < j; k++)
            {
                correMatrix[j][k] = correMatrix[k][j] =
                        correlation(data[j], data[k]);
            }
        }

        return correMatrix;
    }

    /**
     * Calculates the factorial, a (a+1) ... (b-1) b.
     * @param a the starting integer in the factorial.
     * @param b the end integer in the factorial.
     * @return the factorial.
     */

    public double factorial(int a,
                            int b)
    {
        double factor = 1;
        if (a == b)
        {
            return factor = (double) a;
        }
        else if (a < b)
        {
            if(a == 0)
            {
                factor = 1;
            }
            else
            {
                for (int i = a; i <= b; i++)
                {
                    factor = factor * i;
                }
            }
        }
        else
        {
            factor = factorial(b, a);
        }

        return factor;
    }

    /**
     * Calculates the number of combinantions.
     * @param n the total number of elements in the population.
     * @param k the number of elements chosen from the population.
     * @return the number of combinations.
     */

    public double combination(int n,
                              int k)
    {
        double result = 1;
        if (n > 0 && n >= k)
        {
            if (n == k || k == 0)
            {
                result = 1;
            }
            else if (k <= n / 2)
            {
                result = factorial(n, n - k + 1) / factorial(1, k);
            }
            else
            {
                result = combination(n, n - k);
            }
        }
        else
        {
            throw new IllegalArgumentException(
                    "The input number should be an integer and positive.");
        }

        return result;
    }

    /**
     * Obtains the covariance of the AR(1) process.
     * @param n the smaple size.
     * @param correlation the correlation of the AR(1) process at lag 1.
     * @param std the standard deviation of the uncorrelated errors.
     * @return the covariance.
     */

    public double[][] covarianceAR1(int n,
                                    double correlation,
                                    double std)
    {
        double[][] covariance = new double[n][n];
        for (int i = 1; i < n; i++)
        {
            for (int j = 0; j < i; j++)
            {
                covariance[i][j] = covariance[j][i] = pow(std, 2.0) *
                        pow(correlation, i - j) / (1.0 - pow(correlation, 2.0));
            }
        }
        for (int i = 0; i < n; i++)
        {
            covariance[i][i] = pow(std, 2.0) / (1.0 - pow(correlation, 2.0));
        }

        return covariance;
    }

    /**
     * Obtains the covariance of the MA(1) process.
     * @param n the smaple size.
     * @param correlation the correlation of the MA(1) process at lag 1.
     * @param std the standard deviation of the uncorrelated errors.
     * @return the covariance.
     */

    public double[][] covarianceMA1(int n,
                                    double correlation,
                                    double std)
    {
        double[][] covariance = new double[n][n];
        for (int i = 1; i < n; i++)
        {
            covariance[i][i -1] =
                    covariance[i - 1][i] = -1.0 * pow(std, 2.0) * correlation;
        }
        for (int i = 0; i < n; i++)
        {
            covariance[i][i] = pow(std, 2.0) * (1.0 + pow(correlation, 2.0));
        }

        return covariance;
    }

}
