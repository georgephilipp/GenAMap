package control.importing;

import algorithm.AlgorithmView;
import control.DataAddRemoveHandler;
import datamodel.TraitSet;

import javax.swing.JFileChooser;
import datamodel.TraitSubset;
import datamodel.Trait;
import java.util.ArrayList;
import datamodel.Project;
import datamodel.Model;
import datamodel.Network;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashMap;
import javax.swing.JFrame;
import realdata.DataManager;
import control.TableParser;
import java.util.HashSet;
import javax.swing.JOptionPane;

/**
 * Has a few processing ways to build a subset in GenAMap. 
 * @author ross
 */
public class SubsetDialog extends java.awt.Dialog
{
    private AlgorithmView view;
    private boolean canSelect = false;
    private int traitSetId;
    private JFrame parent;

    /** Creates new form SubsetDialog */
    public SubsetDialog(java.awt.Frame parent, boolean modal, AlgorithmView view, boolean createSelected,
            String traits, String project)
    {
        super(parent, modal);
        this.view = view;
        initComponents();
        this.parent = (JFrame) parent;
        this.setLocation(parent.getLocation());

        this.traitComboBox.setEnabled(false);

        this.algorithmComboBox.addItem("Top 50 connected genes");
        this.algorithmComboBox.addItem("Top 100 connected genes");
        this.algorithmComboBox.addItem("Top connected gene and 50 neighbors");
        this.algorithmComboBox.addItem("Top connected gene and 100 neighbors");

        ArrayList<Project> temp = Model.getInstance().getProjects();
        for (int i = 0; i < temp.size(); i++)
        {
            this.projectComboBox.addItem(temp.get(i).getName());
        }

        if (createSelected)
        {
            this.createRadBtn.setSelected(true);
            this.fileButton.setEnabled(false);
            this.networkFileBox.setEnabled(false);
        } else
        {
            this.loadRadBtn.setSelected(true);
            this.fileButton.setEnabled(true);
            this.networkFileBox.setEnabled(true);
            this.algorithmComboBox.setEnabled(false);
        }
        if (project != null)
        {
            for (int i = 0; i < this.projectComboBox.getItemCount(); i++)
            {
                String s = projectComboBox.getItemAt(i).toString();
                if (s.equals(project))
                {
                    this.projectComboBox.setSelectedIndex(i);
                    i = this.projectComboBox.getItemCount();
                }
            }

            if (traits != null)
            {
                for (int i = 0; i < this.traitComboBox.getItemCount(); i++)
                {
                    if (this.traitComboBox.getItemAt(i).toString().equals(traits))
                    {
                        this.traitComboBox.setSelectedIndex(i);
                        i = this.traitComboBox.getItemCount();
                    }
                }
            }
        }
        this.nameTextBox.setEnabled(true);
        this.jLabel1.setEnabled(true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        projectComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        traitComboBox = new javax.swing.JComboBox();
        networkFileBox = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        algorithmComboBox = new javax.swing.JComboBox();
        createRadBtn = new javax.swing.JRadioButton();
        loadRadBtn = new javax.swing.JRadioButton();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        nameTextBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        nFormatButton = new javax.swing.JRadioButton();
        iFormatButton = new javax.swing.JRadioButton();
        networkComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.blue, 2, true));
        jPanel1.setPreferredSize(new java.awt.Dimension(449, 420));

        projectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Project>" }));
        projectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Project");

        jLabel5.setText("Trait Set");

        traitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Trait>" }));
        traitComboBox.setEnabled(false);
        traitComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traitComboBoxActionPerformed(evt);
            }
        });

        networkFileBox.setEditable(false);
        networkFileBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                networkFileBoxMouseClicked(evt);
            }
        });

        fileButton.setText("...");
        fileButton.setEnabled(false);
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Algorithm");

        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Algorithm>" }));

        buttonGroup1.add(createRadBtn);
        createRadBtn.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        createRadBtn.setText("Create a new Subset");
        createRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRadBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(loadRadBtn);
        loadRadBtn.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        loadRadBtn.setText("Load from File");
        loadRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadRadBtnActionPerformed(evt);
            }
        });

        importButton.setText("Make Subset");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setText("                             ");

        nameTextBox.setEnabled(false);

        jLabel1.setText("Name:");
        jLabel1.setEnabled(false);

        buttonGroup2.add(nFormatButton);
        nFormatButton.setText("Name format");
        nFormatButton.setEnabled(false);

        buttonGroup2.add(iFormatButton);
        iFormatButton.setText("Index format");
        iFormatButton.setEnabled(false);

        networkComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Network>" }));
        networkComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setText("Network");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(nFormatButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(iFormatButton))
                                    .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(networkFileBox, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel5))
                                    .addComponent(jLabel1))
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(nameTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(traitComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(projectComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 292, Short.MAX_VALUE)))
                            .addComponent(loadRadBtn)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(createRadBtn)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(traitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(createRadBtn)
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadRadBtn)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkFileBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nFormatButton)
                    .addComponent(iFormatButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(cancelButton))
                .addGap(18, 18, 18)
                .addComponent(errorLabel)
                .addGap(23, 23, 23))
        );

        add(jPanel1, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void networkFileBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkFileBoxMouseClicked
        fileButtonActionPerformed(null);
}//GEN-LAST:event_networkFileBoxMouseClicked

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        if (!canSelect)
        {
            return;
        }

        JFileChooser c = new JFileChooser(Model.getInstance().GetLastFilePath());
        // Demonstrate "Open" dialog:
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION)
        {
            this.networkFileBox.setText(c.getSelectedFile().getAbsolutePath());
            Model.getInstance().AccountForLastFilePath(c.getSelectedFile().getAbsolutePath());
        }
}//GEN-LAST:event_fileButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed

        String projectName;
        String traitName;

        if (this.nameTextBox.getText().equals(""))
        {
            errorLabel.setText("You must choose a name");
            return;
        }
        
        if (this.nameTextBox.getText().length() > 30)
        {
            errorLabel.setText("Name may be at most 30 characters");
            return;
        }

        if (this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            String s = "You must select a valid project option.";
            this.errorLabel.setText(s);
            return;
        }
        projectName = (String) this.projectComboBox.getSelectedItem();
        if (this.traitComboBox.getSelectedItem().equals("<Select Traits>"))
        {
            String s = "You must select a valid traits option.";
            this.errorLabel.setText(s);
            return;
        }
        traitName = (String) this.traitComboBox.getSelectedItem();

        int projID = Model.getInstance().getProject(projectName).getId();
        int traitID = Model.getInstance().getProject(projectName).getTrait(traitName).getId();
        Project assocProj = Model.getInstance().getProject(projectName);
        TraitSet ts = assocProj.getTrait(traitName);
        if(ts.getSubset(this.nameTextBox.getText()) != null)
        {
            this.errorLabel.setText("Name already in existance for these traits");
            return;
        }
        ArrayList<String> whereArgs = new ArrayList();
        whereArgs.add("name=\"" + this.nameTextBox.getText() + "\"");
        whereArgs.add("tsid=" + ts.getId());
        if(DataManager.runSelectQuery("id", "traitsubset", true, whereArgs, null).size() > 0)
        {
            this.errorLabel.setText("Name already in existance for these traits");
            return;
        }

        if (this.createRadBtn.isSelected())
        {
            if(this.algorithmComboBox.getSelectedItem().toString().equals("<Select Algorithm>"))
            {
                this.errorLabel.setText("You need to select a valid algorithm");
                return;
            }

            if(this.networkComboBox.getSelectedIndex() <= 0)
            {
                this.errorLabel.setText("You need to select a valid network.");
                return;
            }

            int netid = ((Network)ts.getTraitStructure(this.networkComboBox.getSelectedItem().toString())).getId();
            ArrayList<Integer> idx = new ArrayList<Integer>();
            ArrayList<Integer> traits = getTop100Traits(netid, ts.getId());

            if(this.algorithmComboBox.getSelectedItem().toString().equals("Top 50 connected genes"))
            {
                for(int i = 0; i < 50 && i < traits.size(); i ++)
                {
                    idx.add(traits.get(i));
                }
            }
            else if(this.algorithmComboBox.getSelectedItem().toString().equals("Top 100 connected genes"))
            {
                for(int i = 0; i < 100 && i < traits.size(); i ++)
                {
                    idx.add(traits.get(i));
                }
            }
            else if(this.algorithmComboBox.getSelectedItem().toString().equals("Top connected gene and 50 neighbors"))
            {
                idx.add(traits.get(0));
                ArrayList<Integer> neighbs = get100NeighborsForTrait(idx.get(0), netid);
                for(int i = 0; i < 50 && i < neighbs.size(); i ++)
                {
                    idx.add(neighbs.get(i));
                }
            }
            else
            {
                idx.add(traits.get(0));
                ArrayList<Integer> neighbs = get100NeighborsForTrait(idx.get(0), netid);
                for(int i = 0; i < 100 && i < neighbs.size(); i ++)
                {
                    idx.add(neighbs.get(i));
                }
            }

            TraitSubset subset = new TraitSubset(ts, idx, this.nameTextBox.getText());

            ts.addSubset(subset);
            DataAddRemoveHandler.getInstance().refreshDisplay();
        }
        else
        {
            if (this.loadRadBtn.isSelected())
            {
                if (!(new File(networkFileBox.getText()).exists()))
                {
                    errorLabel.setText("File does not exist.");
                    return;
                }

                if (!this.nFormatButton.isSelected() && !this.iFormatButton.isSelected())
                {
                    errorLabel.setText("Select a format");
                    return;
                }
                
                int id = -1;

                try
                {
                    whereArgs.clear();
                    whereArgs.add("traitsetid=" + traitID);
                    ArrayList<String> traitIds = DataManager.runSelectQuery("id", "trait", true, whereArgs, "idx");
                    ArrayList<String> traitNames = DataManager.runSelectQuery("name", "trait", true, whereArgs, "idx");
                    HashMap<String, String> nameToIdMap = new HashMap();
                    int numTraits = traitIds.size();
                    for(int i=0;i<numTraits;i++)
                        nameToIdMap.put(traitNames.get(i), traitIds.get(i));
                    
                    TableParser tparser = new TableParser();
                    tparser.delimiter = "Tab";
                    ArrayList<Integer> nameKey = new ArrayList();
                    nameKey.add(0);
                    tparser.keys.add(nameKey);
                    tparser.colTypes.add("special:0");
                    if(this.nFormatButton.isSelected())
                    {                     
                        tparser.regSets.add(new HashSet(traitNames));
                    }
                    else
                    {
                        tparser.regSets.add(new HashSet());
                        for(Integer i=1;i<=numTraits;i++)
                            tparser.regSets.get(0).add(i.toString());
                    }
                    tparser.setup(this.networkFileBox.getText());
                    
                    ArrayList<String> line;
                    StringBuilder traitListBuilder = new StringBuilder();
                    
                    while(true)
                    {
                        line = tparser.readline();
                        if(line.size() == 1)
                        {
                            JOptionPane.showMessageDialog(null, "Error while parsing the data file.\nThis is likely caused by incorrect formatting.\n Error message was: " + line.get(0));
                            throw new RuntimeException("Incorrect file formatting");
                        }
                        if(line.get(1) == null)
                            break;
                        if(this.nFormatButton.isSelected())
                            traitListBuilder.append(nameToIdMap.get(line.get(1)));
                        else
                            traitListBuilder.append(traitIds.get(Integer.parseInt(line.get(1))-1));
                        traitListBuilder.append(",");    
                    }
                    
                    ArrayList<String> cols = new ArrayList<String>();
                    cols.add("name");
                    cols.add("tsid");
                    ArrayList<String> vals = new ArrayList<String>();
                    vals.add(this.nameTextBox.getText());
                    vals.add(traitID + "");
                    if(!DataManager.runInsertQuery(cols, vals, "traitsubset"))
                    {
                        JOptionPane.showMessageDialog(null, "Error while uploading the data to the DB.\nThis is a bug. Please contact the developers.\n Error message was: " + DataManager.getLastError());
                        throw new RuntimeException("Importing problem");
                    }

                    ArrayList<String> where = new ArrayList<String>();
                    where.add("name=\"" + this.nameTextBox.getText() + "\"");
                    where.add("tsid=" + traitID + "");
                    id = Integer.parseInt((String)DataManager.runSelectQuery("id", "traitsubset", true, where, null).get(0));

                    String traitList = traitListBuilder.toString();
                    traitList = traitList.substring(0, traitList.length() - 1);
                    
                    vals.clear();
                    vals.add(id + "");
                    vals.add(traitList);
                    int listId = Integer.parseInt(DataManager.runFunction("create_subset", vals));
                    
                    TraitSubset subset = new TraitSubset(ts, id, this.nameTextBox.getText(), listId, -1);
                    ts.addSubset(subset);
                    DataAddRemoveHandler.getInstance().refreshDisplay();
                    this.setVisible(false);
                    this.dispose();
                } 
                catch (Exception e)
                {
                    this.errorLabel.setText(e.getMessage());
                    return;
                }
            }
        }
        this.closeDialog(null);
}//GEN-LAST:event_importButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.closeDialog(null);
}//GEN-LAST:event_cancelButtonActionPerformed

    private void projectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboBoxActionPerformed
        if (this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            this.traitComboBox.setEnabled(false);
            return;
        } else
        {
            this.traitComboBox.setEnabled(true);
        }

        Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());

        this.traitComboBox.removeAllItems();
        this.traitComboBox.addItem("<Select Traits>");
        for (int i = 0; i < project.getTraits().size(); i++)
        {
            this.traitComboBox.addItem(project.getTraits().get(i).getName());
        }
    }//GEN-LAST:event_projectComboBoxActionPerformed

    private void createRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRadBtnActionPerformed
        this.fileButton.setEnabled(false);
        this.networkFileBox.setEnabled(false);

        //this.projectComboBox.setEnabled(true);
        //this.traitComboBox.setEnabled(true);
        this.algorithmComboBox.setEnabled(true);
        this.jLabel1.setEnabled(true);
        this.nameTextBox.setEnabled(true);
        canSelect = false;
    }//GEN-LAST:event_createRadBtnActionPerformed

    private void loadRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadRadBtnActionPerformed
        this.fileButton.setEnabled(true);
        this.networkFileBox.setEnabled(true);
        //this.projectComboBox.setEnabled(false);
        //this.traitComboBox.setEnabled(false);
        this.algorithmComboBox.setEnabled(false);
        this.nFormatButton.setEnabled(true);
        this.iFormatButton.setEnabled(true);
        this.jLabel1.setEnabled(true);
        this.nameTextBox.setEnabled(true);
        canSelect = true;
    }//GEN-LAST:event_loadRadBtnActionPerformed

    private void traitComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_traitComboBoxActionPerformed
    {//GEN-HEADEREND:event_traitComboBoxActionPerformed
        this.networkComboBox.removeAllItems();
        this.networkComboBox.addItem("<Select Network>");

        int i = traitComboBox.getSelectedIndex();

        if(i > 0)
        {

            for(String s:Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString())
                    .getTrait(this.traitComboBox.getSelectedItem().toString()).getNetworkIdentifiers())
            {
                this.networkComboBox.addItem(s);
            }
        }
    }//GEN-LAST:event_traitComboBoxActionPerformed

    private void networkComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_networkComboBoxActionPerformed
    {//GEN-HEADEREND:event_networkComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_networkComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton createRadBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton fileButton;
    private javax.swing.JRadioButton iFormatButton;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton loadRadBtn;
    private javax.swing.JRadioButton nFormatButton;
    private javax.swing.JTextField nameTextBox;
    private javax.swing.JComboBox networkComboBox;
    private javax.swing.JTextField networkFileBox;
    private javax.swing.JComboBox projectComboBox;
    private javax.swing.JComboBox traitComboBox;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Integer> get100NeighborsForTrait(Integer get, int netid)
    {
        ArrayList<String> cols = new ArrayList<String>();
        cols.add("trait1");
        cols.add("trait2");
        cols.add("weight");

        ArrayList<String> where = new ArrayList<String>();
        where.add("(trait1 = " + get + " OR trait2 = " + get + ")");
        where.add("netid = " + netid);

        ArrayList<HashMap<String, String>> res = DataManager.runMultiColSelectQuery(cols, "networkval", true, where, null);

        ArrayList<Double> vals = new ArrayList<Double>();

        for(int i = 0; i < 100; i ++ )
        {
            vals.add(-1.0);
        }

        double cur = -1.0;
        ArrayList<Integer> toRet = new ArrayList<Integer>();

        for(int i = 0; i < res.size(); i ++)
        {
            HashMap<String, String> hashy = res.get(i);

            int t1 = Integer.parseInt(hashy.get("trait1"));
            int t2 = Integer.parseInt(hashy.get("trait2"));
            int t = t1 == get ? t2 : t1;

            double w = Math.abs(Double.parseDouble(hashy.get("weight")));

            int j;
            boolean added = false;
            for(j = 0; j < toRet.size(); j ++)
            {
                if(w > vals.get(j))
                {
                    int temp = toRet.get(j);
                    double temp2 = vals.get(j);
                    toRet.set(j, t);
                    vals.set(j, w);

                    int k;
                    for(k = j + 1; k < toRet.size(); k ++)
                    {
                        int c = toRet.get(k);
                        double d = vals.get(k);
                        toRet.set(k, temp);
                        vals.set(k, temp2);
                        temp = c;
                        temp2 = d;
                    }
                    toRet.add(temp);
                    vals.add(temp2);
                    added = true;
                    break;
                }
            }
            if(j < 100 && !added)
            {
                toRet.add(t);
                vals.add(w);
            }
        }

        return toRet;
    }

    private ArrayList<Integer> getTop100Traits(int netid, int tsid)
    {
        SubsetGenerator sg = new SubsetGenerator(parent, true, tsid, netid);

        sg.setVisible(true);
        return sg.toRet;
    }
}
