package control.algodialog;

import algorithm.AlgorithmView;
import algorithm.AssociationParameterObject;
import datamodel.AssociationSet;
import java.util.ArrayList;
import datamodel.Project;
import datamodel.Model;
import datamodel.Network;
import datamodel.TraitSet;

/**
 * Starts a three-way association analysis. 
 * @author ross
 */
public class GeneTraitAssociationAlgorithmDialog extends java.awt.Dialog
{
    /**
     * The algorithm view instance
     */
    private AlgorithmView view;

    /**
     * Creates a new ASsociationAlgorithmDialog
     * @param parent the owner of the dialog
     * @param modal
     * @param view the algorithm view instance
     * @param createSelected whether or not create should be autoselected
     * @param project the project that we are currently creating an association for
     */
    public GeneTraitAssociationAlgorithmDialog(java.awt.Frame parent, boolean modal, AlgorithmView view, boolean createSelected,
            String project)
    {
        super(parent, modal);
        this.setTitle("Gene-Trait Association");
        this.setLocation(parent.getLocation());
        this.view = view;
        initComponents();

        this.traitComboBox.setEnabled(false);

        this.algorithmComboBox.addItem("gGFlasso");
        this.algorithmComboBox.setSelectedIndex(1);
        trait2ComboBox.setEnabled(false);

        ArrayList<Project> temp = Model.getInstance().getProjects();
        for (int i = 0; i < temp.size(); i++)
        {
            this.projectComboBox.addItem(temp.get(i).getName());
        }

        if (project != null)
        {
            this.projectComboBox.setSelectedItem(project);
        }
    }

    /**
     * Fills in the network boxes with the networks for the current display
     * @param project
     */
    public void addressNetworkBoxes(Project project)
    {
        if (networkComboBox.isEnabled() && traitComboBox.getSelectedObjects().length > 0 && !traitComboBox.getSelectedItem().toString().equals("<Select Genes>"))
        {
        }
        else
        {
            this.networkComboBox.removeAllItems();
            this.networkComboBox.addItem("<Select Network>");
            this.assocComboBox.removeAllItems();
            this.assocComboBox.addItem("<Select Association>");

            if (traitComboBox.getSelectedObjects().length > 0 && !traitComboBox.getSelectedItem().toString().equals("<Select Genes>"))
            {
                this.networkComboBox.setEnabled(true);
                this.assocComboBox.setEnabled(true);
                TraitSet t = project.getTrait(this.traitComboBox.getSelectedItem().toString());
                for (int i = 0; i < t.getNetworkIdentifiers().size(); i++)
                {
                    this.networkComboBox.addItem(t.getNetworkIdentifiers().get(i));
                }
                for (AssociationSet as : project.getAssocs())
                {
                    if (as.getTraitSet().getId() == t.getId())
                    {
                        this.assocComboBox.addItem(as.getName());
                    }
                }
            }
            else
            {
                this.networkComboBox.setEnabled(false);
                this.assocComboBox.setEnabled(false);
            }
        }
        this.network2ComboBox.removeAllItems();
        this.network2ComboBox.addItem("<Select Network>");
        if (trait2ComboBox.getSelectedObjects().length > 0 && !trait2ComboBox.getSelectedItem().toString().equals("<Select Traits>"))
        {
            this.network2ComboBox.setEnabled(true);
            TraitSet t = project.getTrait(this.trait2ComboBox.getSelectedItem().toString());
            for (int i = 0; i < t.getNetworkIdentifiers().size(); i++)
            {
                this.network2ComboBox.addItem(t.getNetworkIdentifiers().get(i));
            }
        }
        else
        {
            this.network2ComboBox.setEnabled(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        projectComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        traitComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        trait2ComboBox = new javax.swing.JComboBox();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        algorithmComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        networkComboBox = new javax.swing.JComboBox();
        errorLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        assocNameTextBox = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        network2ComboBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        assocComboBox = new javax.swing.JComboBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.blue, 2, true));

        projectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Project>" }));
        projectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Project");

        jLabel5.setText("Genes");

        traitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Genes>" }));
        traitComboBox.setEnabled(false);
        traitComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traitComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Traits");

        trait2ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Traits>" }));
        trait2ComboBox.setEnabled(false);
        trait2ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trait2ComboBoxActionPerformed(evt);
            }
        });

        importButton.setText("Run");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Algorithm");

        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Algorithm>" }));
        algorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmComboBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Network");

        networkComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Network>" }));
        networkComboBox.setEnabled(false);
        networkComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkComboBoxActionPerformed(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(255, 51, 0));
        errorLabel.setText("                                      ");

        jLabel9.setText("Name");

        jLabel10.setText("Network");

        network2ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Network>" }));
        network2ComboBox.setEnabled(false);
        network2ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                network2ComboBoxActionPerformed(evt);
            }
        });

        jLabel11.setText("Association");

        assocComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Association>" }));
        assocComboBox.setEnabled(false);
        assocComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assocComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(31, 31, 31)
                            .addComponent(assocNameTextBox))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(24, 24, 24)
                            .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(traitComboBox, 0, 295, Short.MAX_VALUE)
                            .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(networkComboBox, 0, 237, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(assocComboBox, 0, 223, Short.MAX_VALUE)))))
                .addGap(74, 74, 74))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(188, 188, 188)
                            .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(trait2ComboBox, 0, 307, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(network2ComboBox, 0, 249, Short.MAX_VALUE)))
                            .addGap(17, 17, 17)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(assocNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(traitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(assocComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trait2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(network2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(cancelButton))
                .addGap(18, 18, 18)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    /**
     * Checks conditions and starts the algorithm. 
     * @param evt
     */
    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        if (this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            String s = "You must select a valid project option.";
            this.errorLabel.setText(s);
            return;
        }

        if (this.traitComboBox.getSelectedItem().equals("<Select Genes>"))
        {
            String s = "You must select a valid genes option.";
            this.errorLabel.setText(s);
            return;
        }

        if (this.algorithmComboBox.getSelectedItem().equals("<Select Algorithm>"))
        {
            String s = "You must select a valid algorithms option.";
            this.errorLabel.setText(s);
            return;
        }

        if (this.trait2ComboBox.getSelectedItem().equals("<Select Traits>"))
        {
            String s = "You must select a valid traits option.";
            this.errorLabel.setText(s);
            return;
        }

        if (this.networkComboBox.getSelectedItem().equals("<Select Network>"))
        {
            String s = "You must selected a valid network option for this algorithm";
            this.errorLabel.setText(s);
            return;
        }
        if (this.assocComboBox.getSelectedItem().equals("<Select Association>"))
        {
            String s = "You must select a valid association option for this algorithm";
            this.errorLabel.setText(s);
            return;
        }
        if (this.network2ComboBox.getSelectedItem().equals("<Select Network>"))
        {
            String s = "You must selected a valid network option for this algorithm";
            this.errorLabel.setText(s);
            return;
        }

        if (this.assocNameTextBox.getText().equals(""))
        {
            String s = "You must determine a valid name.";
            this.errorLabel.setText(s);
            return;
        }

        if (Model.getInstance().getProject(projectComboBox.getSelectedItem().toString()).isAssocNamePresentInProject(this.assocNameTextBox.getText()))
        {
            this.errorLabel.setText("This name already exists for this project.");
            return;
        }

        String projectName = projectComboBox.getSelectedItem().toString();
        String geneName = traitComboBox.getSelectedItem().toString();
        String traitName = trait2ComboBox.getSelectedItem().toString();
        String networkName = this.networkComboBox.getSelectedItem().toString();
        String netwrkName2 = this.network2ComboBox.getSelectedItem().toString();
        String algoName = this.algorithmComboBox.getSelectedItem().toString();

        algoName = (algoName.equals("<Select Algorithm>")) ? null : algoName;


        Project ap = Model.getInstance().getProject(projectName);
        TraitSet gs = ap.getTrait(geneName);
        TraitSet ts = ap.getTrait(traitName);
        int associd = ap.getAssociation(this.assocComboBox.getSelectedItem().toString()).getId();

        Network net = (Network) gs.getTraitStructure(networkName);
        Network net2 = (Network) ts.getTraitStructure(netwrkName2);

        AssociationParameterObject apo = new AssociationParameterObject(
                net, this.assocNameTextBox.getText(), net2, ts.getId(), associd);
        view.addAlgorithm("GTA", 22, ap.getId(), gs.getId(), -1, apo);
        this.closeDialog(null);
}//GEN-LAST:event_importButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.closeDialog(null);
}//GEN-LAST:event_cancelButtonActionPerformed

    private void projectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboBoxActionPerformed
        if (this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            this.traitComboBox.setEnabled(false);
            this.trait2ComboBox.setEnabled(false);
            return;
        }
        else
        {
            this.traitComboBox.setEnabled(true);
        }

        Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());

        this.traitComboBox.removeAllItems();
        this.trait2ComboBox.removeAllItems();
        this.traitComboBox.addItem("<Select Genes>");
        this.trait2ComboBox.addItem("<Select Traits>");
        for (int i = 0; i < project.getTraits().size(); i++)
        {
            if (project.getTraits().get(i).getHasData())
            {
                this.traitComboBox.addItem(project.getTraits().get(i).getName());
            }
        }
    }//GEN-LAST:event_projectComboBoxActionPerformed

    private void traitComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traitComboBoxActionPerformed
        if (this.traitComboBox.getSelectedObjects().length == 0 || this.traitComboBox.getSelectedItem().equals("<Select Genes>") || !this.traitComboBox.isEnabled())
        {
            trait2ComboBox.setEnabled(false);
            Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());
            addressNetworkBoxes(project);
            return;
        }
        else
        {

            trait2ComboBox.setEnabled(true);
        }
        String s = null;
        if (trait2ComboBox.getSelectedItem() != null)
        {
            s = this.trait2ComboBox.getSelectedItem().toString();
        }
        trait2ComboBox.removeAllItems();
        trait2ComboBox.addItem("<Select Traits>");
        Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());

        for (TraitSet m : project.getTraits())
        {
            TraitSet test = project.getTrait(this.traitComboBox.getSelectedItem().toString());
            if (isSameSampleSet(m, test) && m != test)
            {
                if (m.getHasData())
                {
                    trait2ComboBox.addItem(m.getName());
                }
            }
        }

        for (int i = 0; i < trait2ComboBox.getItemCount(); i++)
        {
            if (s != null && trait2ComboBox.getItemAt(i).equals(s))
            {
                trait2ComboBox.setSelectedIndex(i);
            }
        }
        addressNetworkBoxes(project);
    }//GEN-LAST:event_traitComboBoxActionPerformed

    private void algorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmComboBoxActionPerformed
        //do nothing here.
    }//GEN-LAST:event_algorithmComboBoxActionPerformed

    private void trait2ComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trait2ComboBoxActionPerformed
    {//GEN-HEADEREND:event_trait2ComboBoxActionPerformed

        if (this.trait2ComboBox.getSelectedObjects().length == 0 || this.trait2ComboBox.getSelectedItem().equals("<Select Traits>"))
        {
            return;
        }
        this.traitComboBoxActionPerformed(evt);
    }//GEN-LAST:event_trait2ComboBoxActionPerformed

    private void networkComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkComboBoxActionPerformed

        if (this.networkComboBox.getSelectedObjects().length == 0 || !this.networkComboBox.isEnabled())
        {
            return;
        }

    }//GEN-LAST:event_networkComboBoxActionPerformed

    private void network2ComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_network2ComboBoxActionPerformed
    {//GEN-HEADEREND:event_network2ComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_network2ComboBoxActionPerformed

    private void assocComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_assocComboBoxActionPerformed
    {//GEN-HEADEREND:event_assocComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assocComboBoxActionPerformed

    public void setSeletedProject(String project)
    {
        for (int i = 0; i < this.projectComboBox.getItemCount(); i++)
        {
            if (this.projectComboBox.getItemAt(i).equals(project))
            {
                this.projectComboBox.setSelectedIndex(i);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.JComboBox assocComboBox;
    private javax.swing.JTextField assocNameTextBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox network2ComboBox;
    private javax.swing.JComboBox networkComboBox;
    private javax.swing.JComboBox projectComboBox;
    private javax.swing.JComboBox trait2ComboBox;
    private javax.swing.JComboBox traitComboBox;
    // End of variables declaration//GEN-END:variables

    private boolean isSameSampleSet(TraitSet m, TraitSet trait)
    {
        if (m == null || trait == null || m.getNumSamples() != trait.getNumSamples())
        {
            return false;
        }

        return true;
    }
}
