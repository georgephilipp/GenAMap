package control.algodialog;

import algorithm.AlgorithmView;
import algorithm.AssociationParameterObject;
import control.ExampleFileHandler;
import javax.swing.JFileChooser;
import java.util.ArrayList;
import datamodel.Project;
import datamodel.MarkerSet;
import datamodel.Model;
import datamodel.Network;
import datamodel.Sample;
import datamodel.TraitSet;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import control.TableParser;
import realdata.DataManager;
import java.io.File;

/**
 * Allows a user to an algorithm that will cluster a network.
 * @author ross
 */
public class ClusteringAlgorithmDialog extends java.awt.Dialog
{
    AlgorithmView view;
    boolean canSelect = false;
    JFrame parent;

    /** Creates new form  */
    public ClusteringAlgorithmDialog(java.awt.Frame parent, boolean modal, AlgorithmView view, boolean createSelected, 
            String project, String traits)
    {
        super(parent, modal);
        this.setLocation(parent.getLocation());
        this.parent = (JFrame)parent;
        this.view = view;
        initComponents();

        this.traitComboBox.setEnabled(false);

        this.algorithmComboBox.addItem("Agglomerate Hierarchical Clustering");
        
        ArrayList<Project> temp = Model.getInstance().getProjects();
        for(int i = 0; i < temp.size(); i ++)
        {
            this.projectComboBox.addItem(temp.get(i).getName());
        }

        if(createSelected)
        {
            this.createRadBtn.setSelected(true);
            this.fileButton.setEnabled(false);
            this.fileButton1.setEnabled(false);
            this.networkFileBox.setEnabled(false);
        }
        else
        {
            this.loadRadBtn.setSelected(true);
            this.fileButton.setEnabled(true);
            this.fileButton1.setEnabled(true);
            this.networkFileBox.setEnabled(true);
            this.algorithmComboBox.setEnabled(false);
        }
        if(project != null)
        {
            this.projectComboBox.setSelectedItem(project);
        }
        if(traits != null)
        {
            this.traitComboBox.setSelectedItem(traits);
        }
        
        if(project != null && traits == null)
        {
            if(this.traitComboBox.getItemCount() > 1)
            {
                this.traitComboBox.setSelectedIndex(1);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        projectComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        traitComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        networkFileBox = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        createRadBtn = new javax.swing.JRadioButton();
        loadRadBtn = new javax.swing.JRadioButton();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        algorithmComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        networkComboBox = new javax.swing.JComboBox();
        errorLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        assocNameTextBox = new javax.swing.JTextField();
        fileButton1 = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.blue, 2, true));

        projectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Project>" }));
        projectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Project");

        jLabel5.setText("Trait Set");

        traitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Trait>" }));
        traitComboBox.setEnabled(false);
        traitComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traitComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("input file must have one entry per line");

        networkFileBox.setEditable(false);
        networkFileBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                networkFileBoxMouseClicked(evt);
            }
        });

        fileButton.setText("...");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(createRadBtn);
        createRadBtn.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        createRadBtn.setActionCommand("Create a new Clustering");
        createRadBtn.setLabel("Create a new Clustering");
        createRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRadBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(loadRadBtn);
        loadRadBtn.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        loadRadBtn.setText("Load from File");
        loadRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadRadBtnActionPerformed(evt);
            }
        });

        importButton.setText("Run");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Algorithm");

        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Algorithm>" }));
        algorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmComboBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Network");

        networkComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Network>" }));
        networkComboBox.setEnabled(false);

        errorLabel.setForeground(new java.awt.Color(255, 51, 0));
        errorLabel.setText("                                      ");

        jLabel9.setText("Name");

        fileButton1.setText("example");
        fileButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(networkFileBox, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fileButton1))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(algorithmComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(createRadBtn)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(31, 31, 31)
                                        .addComponent(assocNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(loadRadBtn)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(traitComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(projectComboBox, 0, 282, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(traitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(assocNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkFileBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(cancelButton)))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void networkFileBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkFileBoxMouseClicked
        fileButtonActionPerformed(null);
}//GEN-LAST:event_networkFileBoxMouseClicked

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        if(!canSelect) return;

        JFileChooser c = new JFileChooser(Model.getInstance().GetLastFilePath());
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            this.networkFileBox.setText(c.getSelectedFile().getAbsolutePath());
            Model.getInstance().AccountForLastFilePath(c.getSelectedFile().getAbsolutePath());
        }
}//GEN-LAST:event_fileButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        if(this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            String s = "You must select a valid project option.";
            this.errorLabel.setText(s);
            return;
        }

        if(this.traitComboBox.getSelectedItem().equals("<Select Traits>"))
        {
            String s = "You must select a valid traits option.";
            this.errorLabel.setText(s);
            return;
        }

        if(this.algorithmComboBox.getSelectedItem().equals("<Select Algorithm>") && !this.loadRadBtn.isSelected())
        {
            String s = "You must select a valid algorithms option.";
            this.errorLabel.setText(s);
            return;
        }

        if(this.networkComboBox.getSelectedItem().equals("<Select Network>") &&
           this.networkComboBox.isEnabled())
        {
            String s = "You must selected a valid network option for this algorithm";
            this.errorLabel.setText(s);
            return;
        }

        if(this.assocNameTextBox.getText().equals(""))
        {
            String s = "You must determine a valid name.";
            this.errorLabel.setText(s);
            return;
        }
        
        if(this.assocNameTextBox.getText().length() > 30)
        {
            String s = "Name may be at most 30 characters.";
            this.errorLabel.setText(s);
            return;
        }

        String projectName = projectComboBox.getSelectedItem().toString();
        String traitName = traitComboBox.getSelectedItem().toString();
        String networkName = this.networkComboBox.getSelectedItem().toString();
        String algoName = this.algorithmComboBox.getSelectedItem().toString();
        algoName = (algoName.equals("<Select Algorithm>")) ? null : algoName;

        
        Project ap = Model.getInstance().getProject(projectName);
        TraitSet ts = ap.getTrait(traitName);

        Network net =  (Network)ts.getTraitStructure(networkName);
        
        ArrayList<String> whereArgs = new ArrayList();
        whereArgs.add("name=\"" + this.assocNameTextBox.getText() + "\"");
        whereArgs.add("traitid=" + ts.getId());
        if(DataManager.runSelectQuery("id", "cluster", true, whereArgs, null).size() > 0)
        {
            String s = "Name already exists for trait set.";
            this.errorLabel.setText(s);
            return;
        }

        if (this.createRadBtn.isSelected())
        {
            AssociationParameterObject apo = new AssociationParameterObject(
                    (Network)ts.getTraitStructure(networkName),
                    this.assocNameTextBox.getText());

            view.addAlgorithm("HCL", 7,
                    ap.getId(), ts.getId(), -1, apo);
        }
        else
        {
            try
            {
                File file = new File(this.networkFileBox.getText());
                if(!file.exists())
                    throw new RuntimeException("File does not exist");                
                
                whereArgs.clear();
                whereArgs.add("traitsetid=" + ts.getId());
                int numTraits = Integer.parseInt(DataManager.runSelectQuery("count(*)", "trait", true, whereArgs, null).get(0));
                                
                TableParser tparser = new TableParser();
                tparser.colTypes.add("posInt");
                tparser.delimiter = "Tab";
                ArrayList<Integer> idxKey = new ArrayList();
                idxKey.add(0);
                tparser.keys.add(idxKey);
                tparser.length = numTraits;
                tparser.setup(this.networkFileBox.getText());
                
                ArrayList<String> line;
                StringBuilder clustBuilder = new StringBuilder();
                
                while(true)
                {
                    line = tparser.readline();
                    if(line.size() == 1)
                        throw new RuntimeException(line.get(0));
                    if(line.get(1) == null)
                        break;
                    int idx = Integer.parseInt(line.get(1));
                    if(idx > numTraits)
                        throw new RuntimeException("Clustering file contained an index larger than the number of traits in the trait set.");
                    clustBuilder.append(line.get(1));
                    clustBuilder.append(",");
                }
                
                String clustString = clustBuilder.toString();
                clustString = clustString.substring(0, clustString.length() - 1);
                
                ts.loadClusterFileIntoDB(this.assocNameTextBox.getText(),-1, clustString);
            }
            catch (Exception e)
            {//Catch exception if any
                JOptionPane.showMessageDialog(null, "Error while parsing the data file.\nThis is likely caused by incorrect formatting.\n Error message was: " + e.getMessage());
                this.errorLabel.setText("Error while parsing file");
                return;
            }          
        }
        this.closeDialog(null);
}//GEN-LAST:event_importButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.closeDialog(null);
}//GEN-LAST:event_cancelButtonActionPerformed

    private void projectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboBoxActionPerformed
        if(this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            this.traitComboBox.setEnabled(false);
            return;
        }
        else
        {
            this.traitComboBox.setEnabled(true);
        }

        Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());

        this.traitComboBox.removeAllItems();
        this.traitComboBox.addItem("<Select Traits>");
        for(int i = 0; i < project.getTraits().size(); i ++)
        {
            this.traitComboBox.addItem(project.getTraits().get(i).getName());
        }
    }//GEN-LAST:event_projectComboBoxActionPerformed

    private void createRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRadBtnActionPerformed
        this.fileButton.setEnabled(false);
        this.fileButton1.setEnabled(false);
        this.networkFileBox.setEnabled(false);
        //this.projectComboBox.setEnabled(true);
        //this.traitComboBox.setEnabled(true);
        this.algorithmComboBox.setEnabled(true);
        networkComboBox.setEnabled(true);
        canSelect = false;
    }//GEN-LAST:event_createRadBtnActionPerformed

    private void loadRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadRadBtnActionPerformed
        this.fileButton.setEnabled(true);
        this.fileButton1.setEnabled(true);
        this.networkFileBox.setEnabled(true);
        //this.projectComboBox.setEnabled(false);
        //this.traitComboBox.setEnabled(false);
        this.algorithmComboBox.setEnabled(false);
        networkComboBox.setEnabled(false);
        canSelect = true;
    }//GEN-LAST:event_loadRadBtnActionPerformed

    private void traitComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traitComboBoxActionPerformed
        if(this.traitComboBox.getSelectedObjects().length == 0 ||
                this.traitComboBox.getSelectedItem().equals("<Select Traits>") ||
                !this.traitComboBox.isEnabled())
        {
            
            return;
        }

        Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());

        this.networkComboBox.setEnabled(true);
        
        this.networkComboBox.removeAllItems();
        this.networkComboBox.addItem("<Select Network>");
        TraitSet t = project.getTrait(this.traitComboBox.getSelectedItem().toString());
        for(int i = 0; i < t.getNetworkIdentifiers().size(); i ++)
        {
            this.networkComboBox.addItem(t.getNetworkIdentifiers().get(i));
        }

        if(t.getHasData())
        {
            this.jLabel7.setEnabled(true);
            this.jLabel8.setEnabled(true);
            this.createRadBtn.setEnabled(true);
            this.createRadBtn.setSelected(true);
            this.createRadBtnActionPerformed(null);
        }
        else
        {
            this.jLabel7.setEnabled(false);
            this.jLabel8.setEnabled(false);
            this.createRadBtn.setEnabled(false);
            this.loadRadBtn.setSelected(true);
            this.loadRadBtnActionPerformed(null);
        }
    }//GEN-LAST:event_traitComboBoxActionPerformed

    private void algorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmComboBoxActionPerformed
        this.traitComboBoxActionPerformed(evt);
    }//GEN-LAST:event_algorithmComboBoxActionPerformed

    private void fileButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fileButton1ActionPerformed
    {//GEN-HEADEREND:event_fileButton1ActionPerformed
        //Open file in notepad or vi or show error message telling the user where to find the file
        if(!ExampleFileHandler.display("clustering"))
            JOptionPane.showMessageDialog(this, ExampleFileHandler.failMessage);
    }//GEN-LAST:event_fileButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.JTextField assocNameTextBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton createRadBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton fileButton;
    private javax.swing.JButton fileButton1;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton loadRadBtn;
    private javax.swing.JComboBox networkComboBox;
    private javax.swing.JTextField networkFileBox;
    private javax.swing.JComboBox projectComboBox;
    private javax.swing.JComboBox traitComboBox;
    // End of variables declaration//GEN-END:variables

    private boolean isSameSampleSet(MarkerSet m, TraitSet trait)
    {
        if(m.getSamples().size() != trait.getSamples().size())
        {
            return false;
        }

        for(Sample s: m.getSamples())
        {
            boolean hasit = false;
            for(Sample s2 : trait.getSamples())
            {
                if(s2.equals(s))
                {
                    hasit = true;
                    break;
                }
            }
            if(!hasit)
                return false;
        }
        return true;
    }

}
