/*
 * AssociationColorKey.java
 *
 * Created on Dec 6, 2011, 1:46:09 PM
 */
package views.network;

import heatchart.HeatChart;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.JLabel;
import views.heatmap.HeatChartScale;
import views.network.threeway.ThreeWayVisualizationSettingsGUI.ImagePanel1;

/**
 * This shows the user what the association coloring
 * of the nodes means. It is automatically brought up
 * whenever the user selects to color by association.
 *
 * @author rcurtis
 */
public class AssociationColorKey extends javax.swing.JFrame
{
    /**
     * The marker association key
     */
    private ImagePanel1 markerAssocKey = new ImagePanel1();
    /**
     * The trait association key
     */
    private ImagePanel1 traitAssocKey = new ImagePanel1();

    /** Creates new form AssociationColorKey */
    public AssociationColorKey()
    {
        initComponents();
        myPanel.setLayout(new GridLayout(1,2));
        refresh();
        myPanel.add(markerAssocKey);//, BorderLayout.EAST);
        myPanel.add(traitAssocKey);//, BorderLayout.WEST);
        myPanel.repaint();
        this.repaint();
        this.validate();
    }

    /**
     * Sets the heat chart representing the trait assoc strengths
     * @param hc the heat chart object ot display
     */
    public void setTraitAssociation(HeatChart hc)
    {
        traitAssocKey.scaleImage = hc.getChartImage();
        this.repaint();
        this.validate();
        this.setVisible(true);
    }

    /**
     * Sets the heat chart representing teh marker assoc strengths
     * @param hc the heat chart object to display
     */
    public void setMarkerAssociation(HeatChart hc)
    {
        markerAssocKey.scaleImage = hc.getChartImage();
        this.repaint();
        this.validate();
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myPanel = new javax.swing.JPanel();

        setTitle("Association Color Key");
        setAlwaysOnTop(true);
        setFocusable(false);
        setName("assocColorKey"); // NOI18N
        setResizable(false);

        javax.swing.GroupLayout myPanelLayout = new javax.swing.GroupLayout(myPanel);
        myPanel.setLayout(myPanelLayout);
        myPanelLayout.setHorizontalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
        );
        myPanelLayout.setVerticalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 383, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel myPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Reverts this display back to the beginning
     */
    public void refresh()
    {
        this.markerAssocKey.scaleImage = HeatChartScale.DrawScale(0.0,
                1.0, 366,
                HeatChart.SCALE_LINEAR, Color.GREEN, Color.GREEN, 99, Color.WHITE).getChartImage();
        this.markerAssocKey.setLayout(new BorderLayout());
        this.markerAssocKey.setToolTipText("The markers are colored by association according to this key.");
        this.markerAssocKey.add(new JLabel("Markers"), BorderLayout.SOUTH);

        this.traitAssocKey.scaleImage = HeatChartScale.DrawScale(0.0,
                1.0, 366,
                HeatChart.SCALE_LINEAR, Color.BLUE, Color.BLUE, 99, Color.WHITE).getChartImage();
        this.traitAssocKey.setLayout(new BorderLayout());
        this.traitAssocKey.add(new JLabel("Traits"), BorderLayout.SOUTH);
        this.traitAssocKey.setToolTipText("The traits are colored by association according to this key.");
    }
}
