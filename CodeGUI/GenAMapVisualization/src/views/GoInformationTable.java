package views;

import BiNGO.GoItems;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import views.network.GoListener;

/**
 * We will display all of the Go information in this table. this can be for
 * a node, or a collection of nodes. There will be some options for
 * going through this list, which will be added as it is developed. 
 *
 * @author RCurtis
 */
public class GoInformationTable extends javax.swing.JPanel implements ListSelectionListener
{
    /**
     * What will listen for changes in the table selection
     */
    private GoListener listener;
    /**
     * Singleton class with just one instance. 
     */
    private static GoInformationTable instance;
    /**
     * The column where we find the name of the Go category
     */
    private int nameCol = 0;

    /**
     * Get the GoInformationTable object. This object is a singleton so we
     * avoid having a bunch of different tables up all the time. 
     * @return
     */
    public static GoInformationTable getInstance()
    {
        if (instance == null)
        {
            instance = new GoInformationTable();
        }
        return instance;
    }

    /** Creates new form GoInformationTable */
    private GoInformationTable()
    {
        initComponents();
        jTable1.getSelectionModel().addListSelectionListener(this);
    }

    /**
     * Sets up the table model with the given data
     * @param items the list of GO items that we will display
     * @param gocats the list of go categories that we will display
     * @param goCatColorMap the color map
     * @param listener the listener to notify when table selection changes
     * @param type the type of display we are using (gene vs gene enrichment)
     */
    public void setup(ArrayList<GoItems> items, ArrayList<String> gocats,
            Map<String, Color> goCatColorMap, GoListener listener, int type)
    {
        try
        {
            this.listener = listener;
            jTable1.setModel(new GoTableModel(items, gocats, goCatColorMap, type));
            TableColumnModel tcm = jTable1.getColumnModel();
            TableColumn columns = tcm.getColumn(0);
            TableCellRenderer renderer = new ColorCellTableRenderer();
            columns.setCellRenderer(renderer);

            if (gocats == null)
            {
                this.nameCol = 2;
                TableColumn column = null;
                for (int i = 0; i < 9; i++)
                {
                    column = jTable1.getColumnModel().getColumn(i);
                    if (i == 2)
                    {
                        column.setPreferredWidth(150); //third column is bigger
                    }
                    else if (i == 0)
                    {
                        column.setPreferredWidth(10);
                    }
                    else if (i >= 5)
                    {
                        column.setPreferredWidth(25);
                    }
                    else
                    {
                        column.setPreferredWidth(60);
                    }
                }
            }
            else
            {
                this.nameCol = 1;
                TableColumn column = null;
                for (int i = 0; i < 2; i++)
                {
                    column = jTable1.getColumnModel().getColumn(i);
                    if (i == 1)
                    {
                        column.setPreferredWidth(400); //third column is bigger
                    }
                    else if (i == 0)
                    {
                        column.setPreferredWidth(10);
                    }
                }
            }
        }
        catch (Exception e)
        {
            //there are som weird things going on when a node doesn't have any
            //list or enrichment. 
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is called when the table value changes, the listener is
     * notified so it can update its state.
     * @param e
     */
    public void valueChanged(ListSelectionEvent e)
    {
        int i = this.jTable1.getSelectedRow();

        if (i != -1)
        {
            String s = (String) jTable1.getValueAt(i, nameCol);
            Color c = (Color) jTable1.getValueAt(i, 0);
            if (listener != null)
            {
                listener.colorByCat(s, c);
            }
        }
    }
}
