package control.algodialog;

import algorithm.AlgorithmView;
import algorithm.Algorithms;
import algorithm.AssociationParameterObject;
import control.DataAddRemoveHandler;
import javax.swing.JFileChooser;
import java.util.ArrayList;
import datamodel.Project;
import datamodel.MarkerSet;
import datamodel.Model;
import datamodel.Network;
import datamodel.Population;
import datamodel.TraitSet;
import javax.swing.JFrame;
import realdata.DataManager;

/**
 * Allows a user to choose an algorithm that will create an association set.
 * From this, we can also load in an nxj file to the database as an association set.
 * @author ross
 */
public class AssociationAlgorithmDialog extends java.awt.Dialog
{
    /**
     * The algorithm view instance
     */
    private AlgorithmView view;
    /**
     * Whether or not the user can browse for a file right now
     */
    private boolean canSelect = false;
    private java.awt.Frame parent;

    /**
     * Creates a new ASsociationAlgorithmDialog
     * @param parent the owner of the dialog
     * @param modal
     * @param view the algorithm view instance
     * @param createSelected whether or not create should be autoselected
     * @param project the project that we are currently creating an association for
     * @param traits the traitset that is currently selected
     * @param markers the markerset that is currently selected
     */
    public AssociationAlgorithmDialog(java.awt.Frame parent, boolean modal, AlgorithmView view, boolean createSelected,
            String project, String traits, String markers)
    {
        super(parent, modal);
        this.parent = parent;
        this.setLocation(parent.getLocation());
        this.view = view;
        initComponents();

        this.traitComboBox.setEnabled(false);

        for (int i = 0; i < Algorithms.AssociationAlgorithms.algonames().size(); i++)
        {
            this.algorithmComboBox.addItem(Algorithms.AssociationAlgorithms.getalgorithms().get(i));
        }

        ArrayList<Project> temp = Model.getInstance().getProjects();
        for (int i = 0; i < temp.size(); i++)
        {
            this.projectComboBox.addItem(temp.get(i).getName());
        }

        if (createSelected)
        {
            this.createRadBtn.setSelected(true);
            this.fileButton.setEnabled(false);
            this.networkFileBox.setEnabled(false);
        }
        else
        {
            this.loadRadBtn.setSelected(true);
            this.fileButton.setEnabled(true);
            this.networkFileBox.setEnabled(true);
            this.algorithmComboBox.setEnabled(false);
        }
        if (project != null)
        {
            this.projectComboBox.setSelectedItem(project);
        }
        if (traits != null)
        {
            this.traitComboBox.setSelectedItem(traits);
        }
        if (markers != null)
        {
            this.markerComboBox.setSelectedItem(markers);
        }

        if (project != null && traits == null)
        {
            if (this.traitComboBox.getItemCount() > 1)
            {
                this.traitComboBox.setSelectedIndex(1);
                if (this.markerComboBox.getItemCount() > 1)
                {
                    this.markerComboBox.setSelectedIndex(1);
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        projectComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        traitComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        networkFileBox = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        markerComboBox = new javax.swing.JComboBox();
        createRadBtn = new javax.swing.JRadioButton();
        loadRadBtn = new javax.swing.JRadioButton();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        algorithmComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        networkComboBox = new javax.swing.JComboBox();
        errorLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        assocNameTextBox = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        popNumberCombobox = new javax.swing.JComboBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.blue, 2, true));

        projectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Project>" }));
        projectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Project");

        jLabel5.setText("Trait Set");

        traitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Trait>" }));
        traitComboBox.setEnabled(false);
        traitComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traitComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("input file must be a JxK matrix file, tab delimeted");

        networkFileBox.setEditable(false);
        networkFileBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                networkFileBoxMouseClicked(evt);
            }
        });

        fileButton.setText("...");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Marker Set");

        markerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Markers>" }));
        markerComboBox.setEnabled(false);
        markerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markerComboBoxActionPerformed(evt);
            }
        });

        buttonGroup1.add(createRadBtn);
        createRadBtn.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        createRadBtn.setText("Create a new Association");
        createRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRadBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(loadRadBtn);
        loadRadBtn.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        loadRadBtn.setText("Load from File");
        loadRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadRadBtnActionPerformed(evt);
            }
        });

        importButton.setText("Run");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Algorithm");

        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Algorithm>" }));
        algorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmComboBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Network");

        networkComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Network>" }));
        networkComboBox.setEnabled(false);
        networkComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkComboBoxActionPerformed(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(255, 51, 0));
        errorLabel.setText("                                      ");

        jLabel9.setText("Name");

        jLabel10.setText("Number");

        popNumberCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select>" }));
        popNumberCombobox.setEnabled(false);
        popNumberCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popNumberComboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadRadBtn)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(networkFileBox, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(popNumberCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(17, 17, 17))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE))))
                            .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(createRadBtn)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(31, 31, 31)
                                        .addComponent(assocNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(markerComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(traitComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(projectComboBox, 0, 282, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(traitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(markerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(assocNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(popNumberCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkFileBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(cancelButton)))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void networkFileBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkFileBoxMouseClicked
        fileButtonActionPerformed(null);
}//GEN-LAST:event_networkFileBoxMouseClicked

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        if (!canSelect)
        {
            return;
        }

        JFileChooser c = new JFileChooser(Model.getInstance().GetLastFilePath());
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION)
        {
            this.networkFileBox.setText(c.getSelectedFile().getAbsolutePath());
            Model.getInstance().AccountForLastFilePath(c.getSelectedFile().getAbsolutePath());
        }
}//GEN-LAST:event_fileButtonActionPerformed

    /**
     * Checks conditions and starts the algorithm. 
     * @param evt
     */
    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        if (this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            String s = "You must select a valid project option.";
            this.errorLabel.setText(s);
            return;
        }

        if (this.traitComboBox.getSelectedItem().equals("<Select Traits>"))
        {
            String s = "You must select a valid traits option.";
            this.errorLabel.setText(s);
            return;
        }

        String projectName = projectComboBox.getSelectedItem().toString();
        String traitName = traitComboBox.getSelectedItem().toString();
        String markerName = markerComboBox.getSelectedItem().toString();
        Project ap = Model.getInstance().getProject(projectName);
        TraitSet ts = ap.getTrait(traitName);
        MarkerSet ms = ap.getMarker(markerName);
        if (this.algorithmComboBox.getSelectedItem().equals("<Select Algorithm>") && !this.loadRadBtn.isSelected())
        {
            String s = "You must select a valid algorithms option.";
            this.errorLabel.setText(s);
            return;
        }

        if(this.algorithmComboBox.getSelectedItem().equals("Adaptive Multi-Task Lasso"))
        {
            ArrayList<String> where = new ArrayList<String>();
            where.add("markersetid = " + ms.getId());
            if(Integer.parseInt(DataManager.runSelectQuery("count(*)", "feature", true, where, null).get(0)) < 1)
            {
                String s = "This markerset does not have features!";
                this.errorLabel.setText(s);
                return;
            }
        }

        if (this.markerComboBox.getSelectedItem().equals("<Select Markers>"))
        {
            String s = "You must select a valid markers option.";
            this.errorLabel.setText(s);
            return;
        }

        if (this.networkComboBox.getSelectedItem().equals("<Select Network>") && this.networkComboBox.isEnabled())
        {
            String s = "You must selected a valid network option for this algorithm";
            this.errorLabel.setText(s);
            return;
        }

        if (this.networkComboBox.getSelectedItem().equals("<Select Population>") && this.networkComboBox.isEnabled())
        {
            String s = "You must selected a valid Population option for this algorithm";
            this.errorLabel.setText(s);
            return;
        }

        if (this.popNumberCombobox.isEnabled() && this.popNumberCombobox.getSelectedItem().equals("<Select>"))
        {
            String s = "You must selected a valid Population Number option for this algorithm";
            this.errorLabel.setText(s);
            return;
        }
        if (this.assocNameTextBox.getText().equals(""))
        {
            String s = "You must determine a valid name.";
            this.errorLabel.setText(s);
            return;
        }

        if (Model.getInstance().getProject(projectComboBox.getSelectedItem().toString()).isAssocNamePresentInProject(this.assocNameTextBox.getText()))
        {
            this.errorLabel.setText("This name already exists for this project.");
            return;
        }

        
        String networkName = this.networkComboBox.getSelectedItem().toString();
        String algoName = this.algorithmComboBox.getSelectedItem().toString();

        String popno = this.popNumberCombobox.getSelectedItem().toString();
        if (!this.popNumberCombobox.isEnabled())
        {
            popno = "1";
        }
        algoName = (algoName.equals("<Select Algorithm>")) ? null : algoName;


        

        Network net = (Network) ts.getTraitStructure(networkName);

        if (ts.getNetworks().size() == 0) //without a network, we will be unable
        //to view this visualization, so we add it here.
        {
            try
            {
                view.addAlgorithm(Algorithms.NetworkAlgorithms.algonames().get(0),
                        Algorithms.NetworkAlgorithms.jobTypeID().get(0),
                        ap.getId(), ts.getId(), ms.getId());
            }
            catch (Exception e)
            {
            }
        }

        if (this.createRadBtn.isSelected())
        {
            int structtype = algorithmComboBox.getSelectedItem().toString().equals("<Select Algorithm>") ? -1 : Algorithms.AssociationAlgorithms.inputStructure().get(algorithmComboBox.getSelectedIndex() - 1);
            IOFilesForIOLasso ioffio = null;
            if(structtype == 3)
            {
                ioffio = new IOFilesForIOLasso(parent, true);

                ioffio.setVisible(true);

                if(ioffio.getInputFilePath() == null || ioffio.getInputFilePath().length() < 5 ||
                        ioffio.getOutputFilePath() == null || ioffio.getOutputFilePath().length() < 5)
                {
                    this.errorLabel.setText("I/O Lasso needs valid group files");
                    return;
                }


            }


            AssociationParameterObject apo = new AssociationParameterObject(
                    (Network) ts.getTraitStructure(networkName),
                    this.assocNameTextBox.getText(), ms.getPopulation(networkName), popno, ioffio);
            int idx = this.algorithmComboBox.getSelectedIndex() - 1;
            view.addAlgorithm(Algorithms.AssociationAlgorithms.algonames().get(idx),
                    Algorithms.AssociationAlgorithms.jobTypeID().get(idx),
                    ap.getId(), ts.getId(), ms.getId(), apo);
        }
        else
        {
            DataAddRemoveHandler.getInstance().addAssociation(ap.getId(), ts, ms, this.assocNameTextBox.getText(), this.networkFileBox.getText(), null);
        }
        this.closeDialog(null);
}//GEN-LAST:event_importButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.closeDialog(null);
}//GEN-LAST:event_cancelButtonActionPerformed

    private void projectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboBoxActionPerformed
        if (this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            this.traitComboBox.setEnabled(false);
            this.markerComboBox.setEnabled(false);
            return;
        }
        else
        {
            this.traitComboBox.setEnabled(true);
            this.markerComboBox.setEnabled(true);
        }

        Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());

        this.traitComboBox.removeAllItems();
        this.markerComboBox.removeAllItems();
        this.traitComboBox.addItem("<Select Traits>");
        this.markerComboBox.addItem("<Select Markers>");
        for (int i = 0; i < project.getTraits().size(); i++)
        {
            this.traitComboBox.addItem(project.getTraits().get(i).getName());
        }
        for (int i = 0; i < project.getMarkers().size(); i++)
        {
            this.markerComboBox.addItem(project.getMarkers().get(i).getName());
        }
    }//GEN-LAST:event_projectComboBoxActionPerformed

    private void createRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRadBtnActionPerformed
        this.fileButton.setEnabled(false);
        this.networkFileBox.setEnabled(false);
        //this.projectComboBox.setEnabled(true);
        //this.traitComboBox.setEnabled(true);
        this.algorithmComboBox.setEnabled(true);
        canSelect = false;
    }//GEN-LAST:event_createRadBtnActionPerformed

    private void loadRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadRadBtnActionPerformed
        this.fileButton.setEnabled(true);
        this.networkFileBox.setEnabled(true);
        //this.projectComboBox.setEnabled(false);
        //this.traitComboBox.setEnabled(false);
        this.algorithmComboBox.setEnabled(false);
        canSelect = true;
    }//GEN-LAST:event_loadRadBtnActionPerformed

    private void traitComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traitComboBoxActionPerformed
        if (this.traitComboBox.getSelectedObjects().length == 0 || this.traitComboBox.getSelectedItem().equals("<Select Traits>") || !this.traitComboBox.isEnabled())
        {

            return;
        }

        String s = this.markerComboBox.getSelectedItem().toString();
        markerComboBox.removeAllItems();
        markerComboBox.addItem("<Select Markers>");
        Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());

        TraitSet ts = project.getTrait(this.traitComboBox.getSelectedItem().toString());
        MarkerSet ms = null;
        if(!s.equals("<Select Markers>"));
        {
            ms = project.getMarker(s);
        }

        if((ts.getHasData() && ms == null) || (ts.getHasData() && ms != null && ms.hasData()))
        {
            algorithmComboBox.setEnabled(true);
            jLabel7.setEnabled(true);
            jLabel8.setEnabled(true);
            this.createRadBtn.setEnabled(true);
            this.createRadBtn.setSelected(true);
            this.createRadBtnActionPerformed(null);
        }
        else
        {
            this.algorithmComboBox.setEnabled(false);
            jLabel7.setEnabled(false);
            jLabel8.setEnabled(false);
            this.createRadBtn.setEnabled(false);
            this.loadRadBtn.setSelected(true);
            this.loadRadBtnActionPerformed(null);
        }

        for (MarkerSet m : project.getMarkers())
        {
            if (isSameSampleSet(m, project.getTrait(this.traitComboBox.getSelectedItem().toString())))
            {
                markerComboBox.addItem(m.getName());
            }
        }

        for (int i = 0; i < markerComboBox.getItemCount(); i++)
        {
            if (markerComboBox.getItemAt(i).equals(s))
            {
                markerComboBox.setSelectedIndex(i);
            }
        }


        int structtype = algorithmComboBox.getSelectedItem().toString().equals("<Select Algorithm>") ? -1 : Algorithms.AssociationAlgorithms.inputStructure().get(algorithmComboBox.getSelectedIndex() - 1);
        if (algorithmComboBox.getSelectedItem().toString().equals("<Select Algorithm>") || !(structtype > 0) || structtype == 3 || !this.algorithmComboBox.isEnabled())//||
        {
            this.networkComboBox.setEnabled(false);
            return;
        }
        else
        {
            this.networkComboBox.setEnabled(true);
        }
        this.networkComboBox.removeAllItems();
        if (structtype == 1)
        {
            this.networkComboBox.addItem("<Select Network>");
            TraitSet t = project.getTrait(this.traitComboBox.getSelectedItem().toString());
            for (int i = 0; i < t.getNetworkIdentifiers().size(); i++)
            {
                this.networkComboBox.addItem(t.getNetworkIdentifiers().get(i));
            }
        }
        else if (structtype == 2)
        {
            this.networkComboBox.addItem("<Select Population>");
            MarkerSet m = project.getMarker(this.markerComboBox.getSelectedItem().toString());
            if (m == null)
            {
                return;
            }
            for (int i = 0; i < m.getPopulations().size(); i++)
            {
                this.networkComboBox.addItem(m.getPopulations().get(i));
            }
        }

    }//GEN-LAST:event_traitComboBoxActionPerformed

    private void algorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmComboBoxActionPerformed
        int structtype = algorithmComboBox.getSelectedItem().toString().equals("<Select Algorithm>") ? -1 : Algorithms.AssociationAlgorithms.inputStructure().get(algorithmComboBox.getSelectedIndex() - 1);
        if (structtype == 2)
        {
            jLabel8.setText("Population");
            jLabel10.setVisible(true);
            popNumberCombobox.setVisible(true);
        }
        else if(structtype == 1)
        {
            jLabel8.setText("Network");
            jLabel10.setVisible(false);
            popNumberCombobox.setVisible(false);
        }
        this.traitComboBoxActionPerformed(evt);
    }//GEN-LAST:event_algorithmComboBoxActionPerformed

    private void markerComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_markerComboBoxActionPerformed
    {//GEN-HEADEREND:event_markerComboBoxActionPerformed

        if (this.markerComboBox.getSelectedObjects().length == 0 || this.markerComboBox.getSelectedItem().equals("<Select Markers>") || !this.markerComboBox.isEnabled())
        {
            return;
        }
        this.traitComboBoxActionPerformed(evt);
        /*
        String s = this.traitComboBox.getSelectedItem().toString();
        traitComboBox.removeAllItems();
        traitComboBox.addItem("<Select Traits>");
        AssociationProjectD project = ModelD.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());

        for(TraitSet t: project.getTraits())
        {
        if(isSameSampleSet(project.getMarker(this.markerComboBox.getSelectedItem().toString()),t))
        {
        traitComboBox.addItem(t.getName());
        }
        }

        for(int i = 0; i < traitComboBox.getItemCount(); i ++)
        {
        if(traitComboBox.getItemAt(i).equals(s))
        {
        traitComboBox.setSelectedIndex(i);
        }
        }*/
    }//GEN-LAST:event_markerComboBoxActionPerformed

    private void popNumberComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popNumberComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popNumberComboboxActionPerformed

    private void networkComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkComboBoxActionPerformed

        if (this.networkComboBox.getSelectedObjects().length == 0 || !this.networkComboBox.isEnabled())
        {
            return;
        }

        if (popNumberCombobox.isVisible())
        {
            if (networkComboBox.getSelectedItem().toString().compareToIgnoreCase("<Select Population>") == 0 || networkComboBox.getSelectedItem().toString().compareToIgnoreCase("<Select Network>") == 0)
            {
                return;
            }
            else
            {
                Project project = Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString());
                MarkerSet m = project.getMarker(markerComboBox.getSelectedItem().toString());
                Population p = m.getPopulation(networkComboBox.getSelectedItem().toString());
                if (p.isStructureGenerated())
                {
                    popNumberCombobox.setEnabled(true);
                    popNumberCombobox.removeAllItems();
                    popNumberCombobox.addItem("<Select>");
                    for (int n = 2; n < 11; n++)
                    {
                        popNumberCombobox.addItem(n);
                    }
                }
                else
                {
                    popNumberCombobox.removeAllItems();
                    popNumberCombobox.addItem(p.getTotPopIfUserGen());

                    popNumberCombobox.setEnabled(false);
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_networkComboBoxActionPerformed

    public void setSeletedProject(String project)
    {
        for (int i = 0; i < this.projectComboBox.getItemCount(); i++)
        {
            if (this.projectComboBox.getItemAt(i).equals(project))
            {
                this.projectComboBox.setSelectedIndex(i);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                AssociationAlgorithmDialog dialog = new AssociationAlgorithmDialog(new java.awt.Frame(), true, null, true, null, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.JTextField assocNameTextBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton createRadBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton fileButton;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton loadRadBtn;
    private javax.swing.JComboBox markerComboBox;
    private javax.swing.JComboBox networkComboBox;
    private javax.swing.JTextField networkFileBox;
    private javax.swing.JComboBox popNumberCombobox;
    private javax.swing.JComboBox projectComboBox;
    private javax.swing.JComboBox traitComboBox;
    // End of variables declaration//GEN-END:variables

    private boolean isSameSampleSet(MarkerSet m, TraitSet trait)
    {
        if (m.getNumSamples() != trait.getNumSamples())
        {
            return false;
        }

        /*for(Sample s: m.getSamples())
        {
        boolean hasit = false;
        for(Sample s2 : trait.getSamples())
        {
        if(s2.equals(s))
        {
        hasit = true;
        break;
        }
        }
        if(!hasit)
        return false;
        }*/
        return true;
    }
}
