/*
 * TraitImporter.java
 *
 * Created on Aug 12, 2009, 11:11:25 AM
 */
package control.importing;

import accessories.FileController;
import control.DataAddRemoveHandler;
import datamodel.Trait;
import datamodel.Model;
import datamodel.Sample;
import java.io.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import realdata.DataManager;

/**
 * This package will interface with the user to get all the information needed
 * to import trait data into the model. It reads in the file and then
 * starts the import process. 
 * @author ross
 */
public class TraitImporter extends java.awt.Dialog
{
    private ArrayList<Trait> traits;

    /**
     * Creates the TraitImporter.
     * @param parent
     * @param modal
     */
    public TraitImporter(java.awt.Container parent, boolean modal)
    {
        super(null, modal);
        initComponents();
        this.setLocation(parent.getLocation());
        this.sampleButton.setEnabled(false);
        this.sampleHelpButton.setEnabled(false);
        this.sampleTextBox.setEnabled(false);
        this.labelButton.setEnabled(false);
        this.labelHelpButton.setEnabled(false);
        this.labelTextBox.setEnabled(false);
        this.jLabel6.setEnabled(false);
        this.jLabel7.setEnabled(false);
        this.nkRadioButton.setSelected(true);
        this.rcRadioButton.setSelected(true);

        ArrayList<String> speciesNames = DataManager.runSelectQuery("name", "species", false, null, "id");
        for(String s : speciesNames)
        {
            this.projectComboBox1.addItem(s);
        }

        ArrayList<String> projectNames = DataManager.runSelectQuery("name", "project", false, null, null);
        for (String project : projectNames)
        {
            this.projectComboBox.addItem(project);
        }
        JFileChooser c = new JFileChooser(Model.getInstance().GetLastFilePath());
        int rVal = c.showOpenDialog(parent);
        if (rVal == JFileChooser.APPROVE_OPTION)
        {
            this.traitTextBox.setText(c.getSelectedFile().getAbsolutePath());
            this.traitNameField.setText(removeExtension(c.getSelectedFile().getName()));
            Model.getInstance().AccountForLastFilePath(c.getSelectedFile().getAbsolutePath());
        }

        traits = new ArrayList<Trait>();
    }

    /**
     * Ulitity method to strip extension from a file name. 
     * @param s
     * @return
     */
    private String removeExtension(String s)
    {
        int idx = s.indexOf('.');
        if (idx > 0)
        {
            return s.substring(0, idx);
        }
        return s;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dimButtonGroup = new javax.swing.ButtonGroup();
        headButtonGroup = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        nkRadioButton = new javax.swing.JRadioButton();
        knRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        rcRadioButton = new javax.swing.JRadioButton();
        norcRadioButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        delimiterTextBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        sampleTextBox = new javax.swing.JTextField();
        labelTextBox = new javax.swing.JTextField();
        projectComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fileButton = new javax.swing.JButton();
        sampleButton = new javax.swing.JButton();
        labelButton = new javax.swing.JButton();
        fileHelpButton = new javax.swing.JButton();
        sampleHelpButton = new javax.swing.JButton();
        labelHelpButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        traitTextBox = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        traitNameField = new javax.swing.JTextField();
        phenoRadioButton = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        projectComboBox1 = new javax.swing.JComboBox();
        isHasDataCheck = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();

        setTitle("Import Data");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel4.setAutoscrolls(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red));

        dimButtonGroup.add(nkRadioButton);
        nkRadioButton.setText("NxK");
        nkRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nkRadioButtonActionPerformed(evt);
            }
        });

        dimButtonGroup.add(knRadioButton);
        knRadioButton.setText("KxN");
        knRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knRadioButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        jLabel1.setText("File Format");

        headButtonGroup.add(rcRadioButton);
        rcRadioButton.setText("row & column headers");
        rcRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rcRadioButtonActionPerformed(evt);
            }
        });

        headButtonGroup.add(norcRadioButton);
        norcRadioButton.setText("no row or column headers");
        norcRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                norcRadioButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("delimeter");

        delimiterTextBox.setText("w");

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        jLabel3.setText("Trait Import");

        sampleTextBox.setEditable(false);
        sampleTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sampleTextBoxMouseClicked(evt);
            }
        });

        labelTextBox.setEditable(false);
        labelTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelTextBoxMouseClicked(evt);
            }
        });

        projectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Project>" }));

        jLabel4.setText("Project");

        jLabel5.setText("Trait file:");

        fileButton.setText("...");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        sampleButton.setText("...");
        sampleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleButtonActionPerformed(evt);
            }
        });

        labelButton.setText("...");
        labelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelButtonActionPerformed(evt);
            }
        });

        fileHelpButton.setText("?");
        fileHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileHelpButtonActionPerformed(evt);
            }
        });

        sampleHelpButton.setText("?");
        sampleHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleHelpButtonActionPerformed(evt);
            }
        });

        labelHelpButton.setText("?");
        labelHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelHelpButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Sample Labels:");

        jLabel7.setText("Trait Labels:");

        traitTextBox.setEditable(false);
        traitTextBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                traitTextBoxMouseClicked(evt);
            }
        });

        jLabel8.setText("Trait Name:");

        dimButtonGroup.add(phenoRadioButton);
        phenoRadioButton.setText("Pheno");
        phenoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phenoRadioButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Species");

        projectComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Select Species>" }));

        isHasDataCheck.setText("Import w/o data");
        isHasDataCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isHasDataCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nkRadioButton)
                                    .addComponent(knRadioButton))
                                .addGap(39, 39, 39)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(norcRadioButton)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(rcRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2)
                                        .addGap(12, 12, 12)
                                        .addComponent(delimiterTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(phenoRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 355, Short.MAX_VALUE)
                                        .addComponent(isHasDataCheck))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(85, 85, 85)
                                        .addComponent(projectComboBox, 0, 394, Short.MAX_VALUE)))
                                .addGap(105, 105, 105)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(85, 85, 85)
                                .addComponent(projectComboBox1, 0, 279, Short.MAX_VALUE)
                                .addGap(103, 103, 103))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel8))
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(traitNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                                    .addComponent(traitTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                                    .addComponent(labelTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                                    .addComponent(sampleTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sampleButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sampleHelpButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fileHelpButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelHelpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(115, 115, 115))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addContainerGap(527, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(519, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(traitNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileHelpButton)
                    .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(traitTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(sampleHelpButton)
                    .addComponent(sampleTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sampleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(labelTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelButton)
                    .addComponent(labelHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(projectComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nkRadioButton)
                    .addComponent(jLabel2)
                    .addComponent(delimiterTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rcRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(knRadioButton)
                    .addComponent(norcRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phenoRadioButton)
                    .addComponent(isHasDataCheck))
                .addContainerGap())
        );

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        errorLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
        errorLabel.setForeground(new java.awt.Color(255, 51, 102));
        errorLabel.setText("                        ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void knRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knRadioButtonActionPerformed
        if (this.norcRadioButton.isSelected())
        {
            this.norcRadioButtonActionPerformed(evt);
        }
    }//GEN-LAST:event_knRadioButtonActionPerformed

    private void norcRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_norcRadioButtonActionPerformed
        this.sampleButton.setEnabled(!this.phenoRadioButton.isSelected());
        this.sampleHelpButton.setEnabled(!this.phenoRadioButton.isSelected());
        this.sampleTextBox.setEnabled(!this.phenoRadioButton.isSelected());
        this.labelButton.setEnabled(true);
        this.labelHelpButton.setEnabled(true);
        this.labelTextBox.setEnabled(true);
        this.jLabel6.setEnabled(true);
        this.jLabel7.setEnabled(true);
    }//GEN-LAST:event_norcRadioButtonActionPerformed

    private void rcRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rcRadioButtonActionPerformed
        this.sampleButton.setEnabled(false);
        this.sampleHelpButton.setEnabled(false);
        this.sampleTextBox.setEnabled(false);
        this.labelButton.setEnabled(false);
        this.labelHelpButton.setEnabled(false);
        this.labelTextBox.setText("");
        this.sampleTextBox.setText("");
        this.labelTextBox.setEnabled(false);
        this.jLabel6.setEnabled(false);
        this.jLabel7.setEnabled(false);
    }//GEN-LAST:event_rcRadioButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void fileHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileHelpButtonActionPerformed
        String s = "Select the file that contains the trait values for each sample";
        JOptionPane.showMessageDialog(this, s, "Help", JOptionPane.INFORMATION_MESSAGE);
        openExampleFile("traitEXAMPLE.txt");
    }//GEN-LAST:event_fileHelpButtonActionPerformed

    private void openExampleFile(String fileName)
    {
                //Open file in notepad or vi or show error message telling the user where to find the file
        Runtime load = Runtime.getRuntime();
        try
        {
            load.exec("notepad " + fileName);
        }
        catch (IOException ex)
        {
            try
            {
                load.exec("vi " + fileName);
            }
            catch (IOException ex1)
            {
                JOptionPane.showMessageDialog(this, "I can't open the example file.\n" +
                        "Please look in the distribution directory for " + fileName);
            }
        }
    }

    private void sampleHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleHelpButtonActionPerformed
        String s = "Select a file with one row for each sample label";
        JOptionPane.showMessageDialog(this, s, "Help", JOptionPane.INFORMATION_MESSAGE);
        openExampleFile("sampleEx.txt");
    }//GEN-LAST:event_sampleHelpButtonActionPerformed

    private void labelHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelHelpButtonActionPerformed
        String s = "Select the file with one row for each trait label";
        JOptionPane.showMessageDialog(this, s, "Help", JOptionPane.INFORMATION_MESSAGE);
        openExampleFile("labelEX.txt");
    }//GEN-LAST:event_labelHelpButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        JFileChooser c = new JFileChooser(Model.getInstance().GetLastFilePath());
        // Demonstrate "Open" dialog:
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION)
        {
            this.traitTextBox.setText(c.getSelectedFile().getAbsolutePath());
            Model.getInstance().AccountForLastFilePath(c.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void sampleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleButtonActionPerformed
        JFileChooser c = new JFileChooser(Model.getInstance().GetLastFilePath());
        // Demonstrate "Open" dialog:
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION)
        {
            this.sampleTextBox.setText(c.getSelectedFile().getAbsolutePath());
            Model.getInstance().AccountForLastFilePath(c.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_sampleButtonActionPerformed

    private void labelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelButtonActionPerformed
        JFileChooser c = new JFileChooser(Model.getInstance().GetLastFilePath());
        // Demonstrate "Open" dialog:
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION)
        {
            this.labelTextBox.setText(c.getSelectedFile().getAbsolutePath());
            Model.getInstance().AccountForLastFilePath(c.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_labelButtonActionPerformed

    private void traitTextBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_traitTextBoxMouseClicked
        fileButtonActionPerformed(null);
    }//GEN-LAST:event_traitTextBoxMouseClicked

    private void sampleTextBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sampleTextBoxMouseClicked
        sampleButtonActionPerformed(null);
    }//GEN-LAST:event_sampleTextBoxMouseClicked

    private void labelTextBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelTextBoxMouseClicked
        labelButtonActionPerformed(null);
    }//GEN-LAST:event_labelTextBoxMouseClicked

    /**
     * Checks all known conditions needed for import and then parses the file to
     * read it into a format ready for database insert. 
     * @param evt
     */
    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        if (this.projectComboBox.getSelectedItem().equals("<Select Project>"))
        {
            String s = "You must select a valid project option.";
            //JOptionPane.showMessageDialog(this, s, "Input Error", JOptionPane.ERROR_MESSAGE);
            this.errorLabel.setText(s);
            return;
        }
        if (this.traitTextBox.getText().equals("") &&
                !this.isHasDataCheck.isSelected())
        {
            String s = "You must select a trait file.";
            //JOptionPane.showMessageDialog(this, s, "Input Error", JOptionPane.ERROR_MESSAGE);
            this.errorLabel.setText(s);
            return;
        }
        
        if (this.delimiterTextBox.getText().equals("") &&
                !this.isHasDataCheck.isSelected())
        {
            String s = "You must select a valid column delimeter.";
            //JOptionPane.showMessageDialog(this, s, "Input Error", JOptionPane.ERROR_MESSAGE);
            this.errorLabel.setText(s);
            return;
        }
        if (this.traitNameField.getText().equals("") || this.traitNameField.getText().contains("_"))
        {
            String s = "You must enter a valid name for this Trait.";
            //JOptionPane.showMessageDialog(this, s, "Input Error", JOptionPane.ERROR_MESSAGE);
            this.errorLabel.setText(s);
            return;
        }

        if (Model.getInstance().getProject(this.projectComboBox.getSelectedItem().toString()).
                getTrait(this.traitNameField.getText()) != null)
        {
            String s = "This trait collection name already exists in this project";
            this.errorLabel.setText(s);
            return;
        }

        File trait = new File(this.traitTextBox.getText());
        if (!trait.exists() && !this.isHasDataCheck.isSelected())
        {
            this.errorLabel.setText("Trait file does not exist.");
            return;
        }

        /*try
        {
            loadTraits(getSelectedFormat(), this.sampleTextBox.getText(),
                    this.labelTextBox.getText(), this.traitTextBox.getText(),
                    this.delimiterTextBox.getText(), new ArrayList<Sample>());
        }
        catch (Exception e)
        {
            String s = "Error reading the file - check formatting";
            this.errorLabel.setText(s);
            return;
        }*/

        if(this.isHasDataCheck.isSelected())
        {
            this.traitTextBox.setText("");
            if(this.labelTextBox.getText().length() < 5)
            {
                this.errorLabel.setText("You have to select a trait lable file!");
                return;
            }
        }

        boolean format = getSelectedFormat() == Trait.KXNNO_FORMAT || getSelectedFormat() == Trait.KXN_FORMAT;
        DataAddRemoveHandler.getInstance().addTraits(
                this.traitNameField.getText(), this.projectComboBox.getSelectedItem().toString(),
                this.traitTextBox.getText(), format, this.sampleTextBox.getText(),
                this.labelTextBox.getText(), this.projectComboBox1.getSelectedIndex(),
                this.norcRadioButton.isSelected() && ( this.sampleTextBox.getText() == null||this.sampleTextBox.getText().equals("") ));

        this.traits.clear();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_importButtonActionPerformed

    private void phenoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phenoRadioButtonActionPerformed
        this.sampleButton.setEnabled(false);
        this.sampleHelpButton.setEnabled(false);
        this.sampleTextBox.setEnabled(false);
    }//GEN-LAST:event_phenoRadioButtonActionPerformed

    private void nkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nkRadioButtonActionPerformed
        if (this.norcRadioButton.isSelected())
        {
            this.norcRadioButtonActionPerformed(evt);
        }
    }//GEN-LAST:event_nkRadioButtonActionPerformed

    private void isHasDataCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_isHasDataCheckActionPerformed
    {//GEN-HEADEREND:event_isHasDataCheckActionPerformed
        if(this.isHasDataCheck.isSelected())
        {
            jLabel5.setEnabled(false);
            jLabel6.setEnabled(false);
            this.traitTextBox.setEnabled(false);
            this.sampleButton.setEnabled(false);
            this.sampleHelpButton.setEnabled(false);
            this.sampleTextBox.setEnabled(false);
            this.delimiterTextBox.setEnabled(false);
            this.fileButton.setEnabled(false);
            this.fileHelpButton.setEnabled(false);
            this.jLabel1.setEnabled(false);
            this.jLabel2.setEnabled(false);
            this.knRadioButton.setEnabled(false);
            this.nkRadioButton.setEnabled(false);
            this.norcRadioButton.setEnabled(false);
            this.phenoRadioButton.setEnabled(false);
            this.rcRadioButton.setEnabled(false);
            this.labelButton.setEnabled(true);
            this.labelHelpButton.setEnabled(true);
            this.labelTextBox.setEnabled(true);
            this.jLabel7.setEnabled(true);
        }
        else
        {
            jLabel5.setEnabled(true);
            this.traitTextBox.setEnabled(true);
            this.sampleButton.setEnabled(this.norcRadioButton.isSelected());
            this.sampleHelpButton.setEnabled(this.norcRadioButton.isSelected());
            this.sampleTextBox.setEnabled(this.norcRadioButton.isSelected());
            this.delimiterTextBox.setEnabled(true);
            this.fileButton.setEnabled(true);
            this.fileHelpButton.setEnabled(true);
            this.jLabel1.setEnabled(true);
            this.jLabel2.setEnabled(true);
            this.knRadioButton.setEnabled(true);
            this.nkRadioButton.setEnabled(true);
            this.norcRadioButton.setEnabled(true);
            this.phenoRadioButton.setEnabled(true);
            this.rcRadioButton.setEnabled(true);
            this.labelButton.setEnabled(this.norcRadioButton.isSelected());
            this.labelHelpButton.setEnabled(this.norcRadioButton.isSelected());
            this.labelTextBox.setEnabled(this.norcRadioButton.isSelected());
            this.jLabel7.setEnabled(this.norcRadioButton.isSelected());
            this.jLabel6.setEnabled(this.norcRadioButton.isSelected());
        }
    }//GEN-LAST:event_isHasDataCheckActionPerformed

    /**
     * Replaces all types of white space with a single space. 
     * @param s
     * @return
     */
    private String processWhiteSpace(String s)
    {
        String del = " ";
        s = s.replace('\t', ' ');
        while (s.indexOf("  ") >= 0)
        {
            s = s.replaceAll("  ", del);
        }
        return s;
    }

    /**
     * Given a string of a project name, this project will be selected in the
     * combo box. 
     * @param project
     */
    public void setSeletedProject(String project)
    {
        for (int i = 0; i < this.projectComboBox.getItemCount(); i++)
        {
            if (this.projectComboBox.getItemAt(i).equals(project))
            {
                this.projectComboBox.setSelectedIndex(i);
            }
        }
    }

    /**
     * Returns ant integer representing the selected format. Although
     * pheno is not represented here.
     * @return
     */
    private int getSelectedFormat()
    {
        int format;
        if (this.nkRadioButton.isSelected())
        {
            if (this.rcRadioButton.isSelected())
            {
                format = Trait.NXK_FORMAT;
            }
            else
            {
                format = Trait.NXKNO_FORMAT;
            }
        }
        else if (this.rcRadioButton.isSelected())
        {
            format = Trait.KXN_FORMAT;
        }
        else
        {
            format = Trait.KXNNO_FORMAT;
        }
        return format;
    }

    /**
     * Crazy long method that parses the file to create the object list of
     * traits for database import. The file is parsed here and will then
     * be inserted into the database on a separate thread. 
     * @param format the format the file is in
     * @param sampleFile the file with the sample labels in it.
     * @param labelFile the file with the trait labels in it.
     * @param file the file with the values in it.
     * @param delimeter the delimeter of the files.
     * @param samples an array list of the sample labels. 
     * @throws IllegalArgumentException
     */
    protected void loadTraits(int format, String sampleFile, String labelFile, String file, String delimeter, ArrayList<Sample> samples) throws IllegalArgumentException
    {
        traits = new ArrayList<Trait>();
        ArrayList<String> sampleLabels = new ArrayList<String>();
        ArrayList<String> traitLabels = new ArrayList<String>();
        boolean needToGenerateSampleLabels = false;
        boolean needToReadLabels = true;
        boolean needToGenerateTraitLabels = false;

        //System.out.println("Loading traits..");

        if (this.phenoRadioButton.isSelected())
        {
            try
            {
                BufferedReader in = new BufferedReader(new FileReader(file));
                int numTraits;
                String str;
                String[] labels;
                ArrayList<String> names = new ArrayList<String>();
                ArrayList<ArrayList<String>> vals = new ArrayList<ArrayList<String>>();

                if (this.rcRadioButton.isSelected())
                {
                    str = in.readLine();
                    str = processWhiteSpace(str);
                    String[] cleanStr = str.split(" ");
                    numTraits = cleanStr.length - 2;

                    labels = new String[numTraits];
                    for (int i = 0; i < numTraits; i++)
                    {
                        labels[i] = cleanStr[i + 2];
                    }
                }
                else
                {
                    if (!labelFile.equals(""))
                    {
                        in.close();
                        in = new BufferedReader(new FileReader(labelFile));
                        ArrayList<String> labs = new ArrayList<String>();
                        while ((str = in.readLine()) != null)
                        {
                            str = processWhiteSpace(str);
                            if (str.equals(""))
                            {
                                continue;
                            }

                            labs.add(str);
                        }

                        numTraits = labs.size();

                        labels = new String[numTraits];
                        for (int i = 0; i < numTraits; i++)
                        {
                            labels[i] = labs.get(i);

                        }
                        in.close();
                        in = new BufferedReader(new FileReader(file));
                    }
                    else
                    {

                        str = in.readLine();
                        str = processWhiteSpace(str);

                        String[] cleanStr = str.split(" ");
                        numTraits = cleanStr.length - 2;

                        labels = new String[numTraits];
                        for (int i = 1; i <= numTraits; i++)
                        {
                            labels[i - 1] = "T_" + i;
                            vals.add(new ArrayList<String>());
                            vals.get(i - 1).add(cleanStr[i + 1]);
                        }
                        names.add(cleanStr[0] + "_" + cleanStr[1]);
                    }
                }

                for (int i = 0; i < numTraits; i++)
                {
                    vals.add(new ArrayList<String>());
                }
                while ((str = in.readLine()) != null)
                {
                    str = processWhiteSpace(str);
                    String[] stuff = str.split(" ");
                    names.add(stuff[0] + "_" + stuff[1]);
                    for (int i = 2; i < stuff.length; i++)
                    {
                        vals.get(i - 2).add(stuff[i]);
                    }
                }

                ArrayList<ArrayList<Double>> values = makeTraitVals(vals, numTraits);

                for (int i = 0; i < numTraits; i++)
                {
                    Trait t = new Trait(labels[i]);
                    this.traits.add(t);

                    for (int x = 0; x < values.get(i).size(); x++)
                    {
                        String sampleID = names.get(i);
                        Sample s = this.getSampleByName(samples, sampleID);
                        if (s == null)
                        {
                            s = new Sample(sampleID);
                            samples.add(s);
                        }
                        s.addTrait(t);
                        t.addSample(s, values.get(i).get(x));
                    }
                }
            }
            catch (IOException e)
            {
            }
        }
        else
        {
            if (format == Trait.KXNNO_FORMAT || format == Trait.NXKNO_FORMAT)
            {
                needToReadLabels = false;
                if (!sampleFile.equals(""))
                {
                    System.out.println("FileController..");

                    sampleLabels = FileController.readLabelFile(sampleFile);
                    if (sampleLabels == null)
                    {
                        throw new IllegalArgumentException("Sample label file does not exist");
                    }
                }
                else
                {
                    needToGenerateSampleLabels = true;
                }
                if (!labelFile.equals(""))
                {
                    traitLabels = FileController.readLabelFile(labelFile);
                    if (traitLabels == null)
                    {
                        throw new IllegalArgumentException("Trait label file does not exist.");
                    }
                }
                else
                {
                    needToGenerateTraitLabels = true;
                }
            }

            System.out.println("Reading file...");
            FileController fc = new FileController(file, delimeter, needToReadLabels);

            if (!fc.isValidFile())
            {
                throw new IllegalArgumentException("Trait file does not exist or is in an illegal format.");
            }
            if (needToReadLabels && format == Trait.KXN_FORMAT)
            {
                sampleLabels = fc.getColHeaders();
                traitLabels = fc.getRowHeaders();
            }
            else if (needToReadLabels && format == Trait.NXK_FORMAT)
            {
                sampleLabels = fc.getRowHeaders();
                traitLabels = fc.getColHeaders();
            }

            if (samples == null)
            {
                samples = new ArrayList<Sample>();
                for (int i = 0; i < sampleLabels.size(); i++)
                {
                    samples.add(new Sample(sampleLabels.get(i)));
                }
            }

            ArrayList<ArrayList<Object>> values = fc.getMatrix();
            if (format == Trait.KXNNO_FORMAT || format == Trait.KXN_FORMAT)
            {

                System.out.println("Num traits  - values : " + values.size());

                for (int i = 0; i < values.size(); i++)
                {
                    String traitName;
                    if (needToGenerateTraitLabels)
                    {
                        traitName = "T" + i;
                    }
                    else
                    {
                        traitName = traitLabels.get(i);
                    }
                    Trait t = new Trait(traitName);
                    this.traits.add(t);
                    for (int j = 0; j < values.get(i).size(); j++)
                    {
                        String sampleID;
                        if (needToGenerateSampleLabels)
                        {
                            sampleID = "S" + j;
                        }
                        else
                        {
                            sampleID = sampleLabels.get(j);
                        }
                        Sample s = this.getSampleByName(samples, sampleID);
                        if (s == null)
                        {
                            s = new Sample(sampleID);
                            samples.add(s);
                        }
                        s.addTrait(t);
                        t.addSample(s, (Double) values.get(i).get(j));
                    }
                }
            }
            else
            {

                System.out.println("Num traits 1 - values (0): " + values.get(0).size());

                for (int i = 0; i < values.get(0).size(); i++)
                {
                    String traitName;
                    if (needToGenerateTraitLabels)
                    {
                        traitName = "T" + i;
                    }
                    else
                    {
                        traitName = traitLabels.get(i);
                    }
                    Trait t = new Trait(traitName);
                    this.traits.add(t);
                    for (int j = 0; j < values.size(); j++)
                    {
                        String sampleID;
                        if (needToGenerateSampleLabels)
                        {
                            sampleID = "S" + j;
                        }
                        else
                        {
                            sampleID = sampleLabels.get(j);
                        }
                        Sample s = this.getSampleByName(samples, sampleID);
                        if (s == null)
                        {
                            s = new Sample(sampleID);
                            samples.add(s);
                        }
                        s.addTrait(t);
                        t.addSample(s, (Double) values.get(j).get(i));
                    }
                }
            }
        }
    }

    /**
     * Takes an arraylist of strings and returns an arraylist of doubles.
     * This is just a type conversion. 
     * @param matrix
     * @param count
     * @return
     */
    private ArrayList<ArrayList<Double>> makeTraitVals(ArrayList<ArrayList<String>> matrix, int count)
    {
        ArrayList<ArrayList<Double>> ret = new ArrayList<ArrayList<Double>>();
        for (int i = 0; i < count; i++)
        {
            ret.add(new ArrayList<Double>());
            for (int x = 0; x < matrix.get(i).size(); x++)
            {
                ret.get(i).add(Double.parseDouble(matrix.get(i).get(x)));
            }

        }
        return ret;
    }

    private Sample getSampleByName(ArrayList<Sample> samples, String sample)
    {
        for (int i = 0; i < samples.size(); i++)
        {
            if (samples.get(i).getName().equals(sample))
            {
                return samples.get(i);
            }
        }

        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField delimiterTextBox;
    private javax.swing.ButtonGroup dimButtonGroup;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton fileButton;
    private javax.swing.JButton fileHelpButton;
    private javax.swing.ButtonGroup headButtonGroup;
    private javax.swing.JButton importButton;
    private javax.swing.JCheckBox isHasDataCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton knRadioButton;
    private javax.swing.JButton labelButton;
    private javax.swing.JButton labelHelpButton;
    private javax.swing.JTextField labelTextBox;
    private javax.swing.JRadioButton nkRadioButton;
    private javax.swing.JRadioButton norcRadioButton;
    private javax.swing.JRadioButton phenoRadioButton;
    private javax.swing.JComboBox projectComboBox;
    private javax.swing.JComboBox projectComboBox1;
    private javax.swing.JRadioButton rcRadioButton;
    private javax.swing.JButton sampleButton;
    private javax.swing.JButton sampleHelpButton;
    private javax.swing.JTextField sampleTextBox;
    private javax.swing.JTextField traitNameField;
    private javax.swing.JTextField traitTextBox;
    // End of variables declaration//GEN-END:variables
}
