/*
 * ItemPanel.java
 *
 * Created on Sep 21, 2010, 10:25:44 AM
 */
package control.itempanel;

import java.awt.Color;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener; 
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 * Each executable thread in the list is displayed through an ItemPanel object.
 * This is the class used to render the visualization of this object as it
 * executes. 
 * @author flaviagrosan
 */
public class ItemPanel extends javax.swing.JPanel
        implements ListCellRenderer, PropertyChangeListener
{
    /**
     * Returns itself after updaing with the current information of the executing
     * thread. 
     * @param list
     * @param value the object that we need to reflect in this ItemPanel object
     * @param index
     * @param sel whether or not this item is selected
     * @param focus
     * @return
     */
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean sel, boolean focus)
    {
        ThreadItem item = (ThreadItem) value;
        //ItemPanel ip = new ItemPanel();

        this.jProgressBar1.setValue(item.getValue());
        this.jLabel3.setText(item.getName());
        if(sel)
        {
            this.setBackground(Color.WHITE);
        }
        else
        {
            this.setBackground(Color.LIGHT_GRAY);
        }

        if(item.isError())
        {
            this.jLabel1.setText(item.getErrorText());
            this.jProgressBar1.setValue(0);
        }
        else if(item.getValue() < 100)
        {
            this.jLabel1.setText(item.getStatus());
        }
        else
        {
            this.jLabel1.setText(item.getSuccessMessage());
        }
        return this;
    }

    /** Creates new form ItemPanel */
    public ItemPanel()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Trait Upload");

        jProgressBar1.setStringPainted(true);

        jLabel2.setText("File: ");

        jLabel3.setText("jLabel3");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(82, 82, 82)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel3))
                    .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 296, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    /**
     * Called to update the display with the status string. 
     * @param s
     * @param isError
     */
    public void setStatus(String s, boolean isError)
    {
        if (isError)
        {
            this.jProgressBar1.setVisible(false);
        }
    }

    /**
     * Called to update the progress bar value. 
     * @param evt
     */
    public void propertyChange(PropertyChangeEvent evt)
    {
        try
        {
            int progress = (Integer) evt.getNewValue();
            this.jProgressBar1.setValue(progress);
            this.revalidate();
            this.repaint();
        }
        catch (Exception e)
        {
            System.err.println(e.getMessage() + "test4");
        }
    }
}
